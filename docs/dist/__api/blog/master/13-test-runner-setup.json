{"type":"root","children":[{"type":"element","tag":"dimertitle","props":{},"children":[{"type":"text","value":"Setting up tests runner for AdonisJS v5"}]},{"type":"element","tag":"h1","props":{"id":"setting-up-tests-runner-for-adonisjs-v5"},"children":[{"type":"element","tag":"a","props":{"href":"#setting-up-tests-runner-for-adonisjs-v5","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Setting up tests runner for AdonisJS v5"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The tests runner of AdonisJS v4 has not been migrated to v5 yet and hence, I receive a lot of questions regarding testing in v5. In this article, "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"I will show you, how to setup "},{"type":"element","tag":"a","props":{"href":"https://github.com/thetutlage/japa"},"children":[{"type":"text","value":"japa"}]},{"type":"text","value":" to test your AdonisJS applications."}]}]},{"type":"element","tag":"div","props":{"className":["toc-container"]},"children":[{"type":"element","tag":"h2","props":{},"children":[{"type":"text","value":"Table of contents"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#wait-why-not-use-jest"},"children":[{"type":"text","value":"Wait, why not use Jest?"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#parallel-test-suites"},"children":[{"type":"text","value":"Parallel test suites"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#snapshot-testing"},"children":[{"type":"text","value":"Snapshot testing"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#jest-not-so-good-parts"},"children":[{"type":"text","value":"Jest not so good parts"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#jest-good-parts"},"children":[{"type":"text","value":"Jest good parts"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#introducing-japa"},"children":[{"type":"text","value":"Introducing Japa"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#setup-for-adonisjs"},"children":[{"type":"text","value":"Setup for AdonisJS"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#understanding-japafile"},"children":[{"type":"text","value":"Understanding japaFile"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#testing-http-calls"},"children":[{"type":"text","value":"Testing HTTP calls"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#interacting-with-the-database"},"children":[{"type":"text","value":"Interacting with the Database"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#running-a-single-test"},"children":[{"type":"text","value":"Running a single test"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#running-a-single-test-file"},"children":[{"type":"text","value":"Running a single test file"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#wrapping-up"},"children":[{"type":"text","value":"Wrapping up"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#lifecycle-hooks"},"children":[{"type":"text","value":"Lifecycle hooks"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#using-global-database-transactions"},"children":[{"type":"text","value":"Using global database transactions"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#read-japa-docs"},"children":[{"type":"text","value":"Read Japa docs"}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The goal of the article is to accomplish the following tasks:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Setup test runner to boot the application first and then run tests."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Ability to run a single test file."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Ability to run a single test in the entire tests suite."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Setup "},{"type":"element","tag":"a","props":{"href":"https://github.com/visionmedia/supertest"},"children":[{"type":"text","value":"supertest"}]},{"type":"text","value":" for making HTTP requests."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Setup "},{"type":"element","tag":"a","props":{"href":"https://github.com/jsdom/jsdom"},"children":[{"type":"text","value":"JSDOM"}]},{"type":"text","value":" for DOM testing."}]}]},{"type":"element","tag":"h2","props":{"id":"wait-why-not-use-jest"},"children":[{"type":"element","tag":"a","props":{"href":"#wait-why-not-use-jest","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Wait, why not use Jest?"}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The Jest explanation will get too long. If you want, you can skip to "},{"type":"element","tag":"a","props":{"href":"#introducing-japa"},"children":[{"type":"text","value":"Introducing Japa"}]},{"type":"text","value":" section."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Jest is a very popular testing framework in the Javascript community. In fact, many individuals have expressed their interest in using Jest with AdonisJS."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Respecting the community opinions, I myself dig into using Jest and realized, most of the Jest features are not required for testing a backend application. Of course, you can still use Jest and ignore those features, but as Jest is not my first choice, I decided not to use it (at least for now)."}]},{"type":"element","tag":"h3","props":{"id":"parallel-test-suites"},"children":[{"type":"element","tag":"a","props":{"href":"#parallel-test-suites","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Parallel test suites"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Jest runs every test suite "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"(the describe block)"}]},{"type":"text","value":" in its own thread. It means, every test suite has its own global isolated state. This is great, until your tests are not dealing with shared resources."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"AdonisJS is a backend framework and most of your tests will be interacting with a database server. Database is a shared resource and multiple tests suites running in parallel will always have data conflicts."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"One option is to use a unique database for each test suite, but that also means, each test suite will have to first "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"create a unique database"}]},{"type":"text","value":" and then "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"run migrations"}]},{"type":"text","value":". This alone will significantly slow down your tests and all the speed gains of parallel tests are of no use. Plus, there is more mental overhead of managing shared resources in a such way, that parallel tests can use them without conflicts."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Other option is to mock the database calls (many articles even suggest doing this). But trust me, never, ever mock your database calls. You will create more problems for yourself."}]},{"type":"element","tag":"h3","props":{"id":"snapshot-testing"},"children":[{"type":"element","tag":"a","props":{"href":"#snapshot-testing","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Snapshot testing"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Another cool feature of Jest is the "},{"type":"element","tag":"a","props":{"href":"https://jestjs.io/docs/en/snapshot-testing"},"children":[{"type":"text","value":"snapshot testing"}]},{"type":"text","value":". Snapshots are great (or maybe not), but they are mainly used for asserting HTML structures."}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I know that snapshots are not technically limited to HTML structures only. But, the official docs + dozens of online articles use them for testing React components output."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"So in short, the spirit of snapshot testing is to avoid defining the HTML structure in your tests manually and instead use a snapshot."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A good number of AdonisJS applications are JSON APIs and they don't output HTML at all. Even, the applications that render HTML should not use snapshots, as there are better ways to test the behavior of a webpage."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Snapshots, asserts against the structure of the HTML and not the behavior of the element. You should test that clicking a button performs the expected action and not whether your button is wrapped inside 10 divs or 3 divs."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In other words, snapshot testing is tightly coupled with the DOM structure and changing the DOM structure doesn't mean the functionality of the app has changed."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here is an "},{"type":"element","tag":"a","props":{"href":"https://kentcdodds.com/blog/effective-snapshot-testing"},"children":[{"type":"text","value":"article from Kent C. Dodds"}]},{"type":"text","value":", sharing some good use cases for snapshot testing and I believe, majority of AdonisJS applications do not fall in the specified use cases."}]},{"type":"element","tag":"h3","props":{"id":"jest-not-so-good-parts"},"children":[{"type":"element","tag":"a","props":{"href":"#jest-not-so-good-parts","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Jest not so good parts"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Features like "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"parallel tests"}]},{"type":"text","value":" and "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"snapshot assertions"}]},{"type":"text","value":" are not bad features in themselves, it's simply, they are not very useful for testing backend code."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"On the personal level, there are some things, I don't like about Jest."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Typescript support is provided using Babel and I am not a big fan of adding too many build processes and config inside a single project."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Also not a big fan of polluting the global namespace with methods like "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"describe"}]},{"type":"text","value":", "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"test"}]},{"type":"text","value":", "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"it"}]},{"type":"text","value":" and so on."}]}]},{"type":"element","tag":"h3","props":{"id":"jest-good-parts"},"children":[{"type":"element","tag":"a","props":{"href":"#jest-good-parts","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Jest good parts"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"So much rant 😐. Well, the article is not meant to criticize Jest. I wanted to share my set of reasons for not using Jest. In fact, Jest has many good parts."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The ability to run a single test file or an individual test."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The diff output of assertion failures is easy to understand."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Lots of in-built helpers for testing DOM."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"And, huge community behind it."}]}]},{"type":"element","tag":"h2","props":{"id":"introducing-japa"},"children":[{"type":"element","tag":"a","props":{"href":"#introducing-japa","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Introducing Japa"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Japa is a small and embeddable test runner, written just for Node.js. It means, it does not carry any extra weight to work in the browser environments."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Following are some of my favorites of Japa (I have written it, so I am bit biased as well)"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"There is no CLI to run tests. You can run your Javascript files directly and it will execute the tests."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Uses "},{"type":"element","tag":"a","props":{"href":"https://www.chaijs.com/guide/styles/#assert"},"children":[{"type":"text","value":"chai assert module"}]},{"type":"text","value":" for assertions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Boot time is "},{"type":"element","tag":"a","props":{"href":"https://github.com/thetutlage/japa#faster-boot-time-"},"children":[{"type":"text","value":"quicker"}]},{"type":"text","value":" than Mocha and Ava. I have not benchmarked it against Jest yet."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Has pretty robust API for managing and creating tests. For example:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run a single test using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":".only"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Skip tests by using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":".skip"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Skip tests just in the CI using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":".skipInCI"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Group tests"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Ability to write regression tests"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Allows assertion planning"}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Written in Typescript, so intellisense works out of the box."}]}]},{"type":"element","tag":"h2","props":{"id":"setup-for-adonisjs"},"children":[{"type":"element","tag":"a","props":{"href":"#setup-for-adonisjs","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Setup for AdonisJS"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Enough of theory, let's begin with some action. Run the following command to install required dependencies from the npm registry."}]},{"type":"element","tag":"div","props":{"className":["tabs"]},"children":[{"type":"element","tag":"div","props":{"className":["tab-head"]},"children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{"dataTitle":"tab-1"},"children":[{"type":"text","value":"Npm"}]},{"type":"element","tag":"li","props":{"dataTitle":"tab-2"},"children":[{"type":"text","value":"Yarn"}]}]}]},{"type":"element","tag":"div","props":{"className":["tab-body"]},"children":[{"type":"element","tag":"div","props":{"className":["tab-item"],"id":"tab-1"},"children":[{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"Npm"}]},{"type":"element","tag":"pre","props":{"className":["language-sh","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token function\">npm</span> i -D japa execa get-port\n"}]}]}]}]},{"type":"element","tag":"div","props":{"className":["tab-item"],"id":"tab-2"},"children":[{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"Yarn"}]},{"type":"element","tag":"pre","props":{"className":["language-sh","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D japa execa get-port\n"}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Next, create "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"japaFile.ts"}]},{"type":"text","value":" file inside the project root and paste following contents inside it."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"japaFile.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token string\">'reflect-metadata'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> join <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'path'</span>\n<span class=\"token keyword\">import</span> getPort <span class=\"token keyword\">from</span> <span class=\"token string\">'get-port'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configure <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'japa'</span>\n<span class=\"token keyword\">import</span> sourceMapSupport <span class=\"token keyword\">from</span> <span class=\"token string\">'source-map-support'</span>\n\nprocess<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">=</span> <span class=\"token string\">'testing'</span>\nprocess<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">ADONIS_ACE_CWD</span> <span class=\"token operator\">=</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">)</span>\nsourceMapSupport<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> handleUncaughtExceptions<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">startHttpServer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Ignitor <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@adonisjs/core/build/src/Ignitor'</span><span class=\"token punctuation\">)</span>\n  process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ignitor</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">httpServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Configure test runner\n */</span>\n<span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  files<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'build/test/**/*.spec.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  before<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    startHttpServer<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Finally, create an example test file to ensure that everything is working as expected. The file must go inside "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"test/"}]},{"type":"text","value":" directory in the project root."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-sh","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token comment\"># Make directory</span>\n<span class=\"token function\">mkdir</span> <span class=\"token builtin class-name\">test</span>\n\n<span class=\"token comment\"># Create empty file</span>\n<span class=\"token function\">touch</span> test/example.spec.ts\n"}]}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"test/example.spec.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> test <span class=\"token keyword\">from</span> <span class=\"token string\">'japa'</span>\n\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Example'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert sum'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>assert<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Make sure to start the development server "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"node ace serve --watch"}]},{"type":"text","value":", so that the Typescript is compiled to Javascript and open a new terminal session to execute the tests by running "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"node build/japaFile.js"}]}]},{"type":"element","tag":"div","props":{"className":["embed","video"]},"children":[{"type":"element","tag":"video","props":{"controls":true},"children":[{"type":"element","tag":"source","props":{"src":"https://res.cloudinary.com/adonis-js/video/upload/v1592989126/adonisjs.com/blog/japa-tests-basic_cvvguq.mp4","type":"video/mp4"},"children":[]}]}]},{"type":"element","tag":"h3","props":{"id":"understanding-japafile"},"children":[{"type":"element","tag":"a","props":{"href":"#understanding-japafile","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Understanding "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"japaFile"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Voila! We have got the basic setup ready. Before moving forward, lets understand what just happened."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"As mentioned earlier. Japa doesn't have any CLI, you just need to create a file and use the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"configure"}]},{"type":"text","value":" method to setup the test runner."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"configure"}]},{"type":"text","value":" method accepts a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"files"}]},{"type":"text","value":" glob to find the test files. We have mentioned "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"build/test/**/*.spec.js"}]},{"type":"text","value":", it means, it will run tests against the compiled Javascript code."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"before"}]},{"type":"text","value":" property accepts an array of actions to execute before japa even search for the test files. We define an action to boot the AdonisJS HTTP server."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Also, instead of relying on the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"PORT"}]},{"type":"text","value":" defined inside the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":".env"}]},{"type":"text","value":" file. We pick a random port for running the HTTP server during tests."}]}]},{"type":"element","tag":"h2","props":{"id":"testing-http-calls"},"children":[{"type":"element","tag":"a","props":{"href":"#testing-http-calls","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Testing HTTP calls"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lets take a step forward and write a test that makes an HTTP call to our AdonisJS server and uses JSDOM to assert the response HTML."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"First, we need to install "},{"type":"element","tag":"a","props":{"href":"https://npm.im/supertest"},"children":[{"type":"text","value":"supertest"}]},{"type":"text","value":" and "},{"type":"element","tag":"a","props":{"href":"https://npm.im/jsdom"},"children":[{"type":"text","value":"jsdom"}]},{"type":"text","value":"."}]},{"type":"element","tag":"div","props":{"className":["tabs"]},"children":[{"type":"element","tag":"div","props":{"className":["tab-head"]},"children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{"dataTitle":"tab-1"},"children":[{"type":"text","value":"Npm"}]},{"type":"element","tag":"li","props":{"dataTitle":"tab-2"},"children":[{"type":"text","value":"Yarn"}]}]}]},{"type":"element","tag":"div","props":{"className":["tab-body"]},"children":[{"type":"element","tag":"div","props":{"className":["tab-item"],"id":"tab-1"},"children":[{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"Npm"}]},{"type":"element","tag":"pre","props":{"className":["language-sh","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token function\">npm</span> i -D supertest @types/supertest jsdom @types/jsdom\n"}]}]}]}]},{"type":"element","tag":"div","props":{"className":["tab-item"],"id":"tab-2"},"children":[{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"Yarn"}]},{"type":"element","tag":"pre","props":{"className":["language-sh","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D supertest @types/supertest jsdom @types/jsdom\n"}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Open the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"test/example.spec.ts"}]},{"type":"text","value":" file and replace its contents with the following code snippet."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"test/example.spec.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> test <span class=\"token keyword\">from</span> <span class=\"token string\">'japa'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">JSDOM</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'jsdom'</span>\n<span class=\"token keyword\">import</span> supertest <span class=\"token keyword\">from</span> <span class=\"token string\">'supertest'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">BASE_URL</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">HOST</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Welcome'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ensure home page works'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>assert<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Make request\n     */</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> text <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">supertest</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BASE_URL</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">/**\n     * Construct JSDOM instance using the response HTML\n     */</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> document <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">JSDOM</span></span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>window\n\n    <span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.title'</span><span class=\"token punctuation\">)</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>title<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>textContent<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'It Works!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Make sure the another terminal window is still compiling the Typescript code using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"node ace serve --watch"}]},{"type":"text","value":" command."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now, re-run the tests by executing "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"node build/japaFile.js"}]},{"type":"text","value":" file."}]},{"type":"element","tag":"h2","props":{"id":"interacting-with-the-database"},"children":[{"type":"element","tag":"a","props":{"href":"#interacting-with-the-database","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Interacting with the Database"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The next step is to write a test that interacts the database. But first, let's update the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"japaFile.ts"}]},{"type":"text","value":" file to run and rollback migrations everytime we run the tests. This way, we will ensure that we are always starting from a clean slate."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"japaFile.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token string\">'reflect-metadata'</span>\n<span class=\"dimer-highlight-code-line\"><span class=\"token keyword\">import</span> execa <span class=\"token keyword\">from</span> <span class=\"token string\">'execa'</span></span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> join <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'path'</span>\n<span class=\"token keyword\">import</span> getPort <span class=\"token keyword\">from</span> <span class=\"token string\">'get-port'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configure <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'japa'</span>\n<span class=\"token keyword\">import</span> sourceMapSupport <span class=\"token keyword\">from</span> <span class=\"token string\">'source-map-support'</span>\n\nprocess<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">=</span> <span class=\"token string\">'testing'</span>\nprocess<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">ADONIS_ACE_CWD</span> <span class=\"token operator\">=</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">)</span>\nsourceMapSupport<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> handleUncaughtExceptions<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"dimer-highlight-code-line\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">runMigrations</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token keyword\">await</span> execa<span class=\"token punctuation\">.</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ace'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'migration:run'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">    stdio<span class=\"token operator\">:</span> <span class=\"token string\">'inherit'</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"dimer-highlight-code-line\"><span class=\"token punctuation\">}</span></span><span class=\"dimer-highlight-code-line\">&nbsp;</span><span class=\"dimer-highlight-code-line\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">rollbackMigrations</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token keyword\">await</span> execa<span class=\"token punctuation\">.</span><span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ace'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'migration:rollback'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">    stdio<span class=\"token operator\">:</span> <span class=\"token string\">'inherit'</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"dimer-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">startHttpServer</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Ignitor <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@adonisjs/core/build/src/Ignitor'</span><span class=\"token punctuation\">)</span>\n  process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ignitor</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">httpServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Configure test runner\n */</span>\n<span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  files<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'build/test/**/*.spec.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  before<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n<span class=\"dimer-highlight-code-line\">    runMigrations<span class=\"token punctuation\">,</span></span>    startHttpServer<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"dimer-highlight-code-line\">  after<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span><span class=\"dimer-highlight-code-line\">    rollbackMigrations<span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Next, re-open the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"test/example.spec.ts"}]},{"type":"text","value":" file and create a new test that interacts with the database."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"test/example.spec.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> test <span class=\"token keyword\">from</span> <span class=\"token string\">'japa'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">JSDOM</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'jsdom'</span>\n<span class=\"token keyword\">import</span> supertest <span class=\"token keyword\">from</span> <span class=\"token string\">'supertest'</span>\n<span class=\"dimer-highlight-code-line\"><span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/User'</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">BASE_URL</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">HOST</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Welcome'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ensure home page works'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>assert<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> text <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">supertest</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BASE_URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> document <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">JSDOM</span></span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>window\n    <span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.title'</span><span class=\"token punctuation\">)</span>\n\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>title<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>textContent<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'It Works!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"dimer-highlight-code-line\">  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ensure user password gets hashed during save'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>assert<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"dimer-highlight-code-line\">    user<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token string\">'virk@adonisjs.com'</span></span><span class=\"dimer-highlight-code-line\">    user<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token string\">'secret'</span></span><span class=\"dimer-highlight-code-line\">    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"dimer-highlight-code-line\">&nbsp;</span><span class=\"dimer-highlight-code-line\">    assert<span class=\"token punctuation\">.</span><span class=\"token function\">notEqual</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> <span class=\"token string\">'secret'</span><span class=\"token punctuation\">)</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's re-run the tests by running "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"node build/japaFile.js"}]},{"type":"text","value":" file."}]},{"type":"element","tag":"div","props":{"className":["embed","video"]},"children":[{"type":"element","tag":"video","props":{"controls":true},"children":[{"type":"element","tag":"source","props":{"src":"https://res.cloudinary.com/adonis-js/video/upload/v1592992827/adonisjs.com/blog/japa-tests-migrations_rxuhcj.mp4","type":"video/mp4"},"children":[]}]}]},{"type":"element","tag":"h2","props":{"id":"running-a-single-test"},"children":[{"type":"element","tag":"a","props":{"href":"#running-a-single-test","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Running a single test"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Quite often, you will find yourself working on code and the tests together. Wouldn't it be nice, if you can speed up the tests feedback loop just by running a single test?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Well, you can do that with Japa quite easily. "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Make use of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"test.only"}]},{"type":"text","value":" method to ignore all other tests across all the files"}]},{"type":"text","value":". For demonstration, lets re-open the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"test/example.spec.ts"}]},{"type":"text","value":" file and run just one test"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token comment\">// ...</span>\n\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Welcome'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n<span class=\"dimer-highlight-code-line\">  test<span class=\"token punctuation\">.</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ensure user password gets hashed during save'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>assert<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    user<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token string\">'virk@adonisjs.com'</span>\n    user<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token string\">'secret'</span>\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n \n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">notEqual</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span> <span class=\"token string\">'secret'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"running-a-single-test-file"},"children":[{"type":"element","tag":"a","props":{"href":"#running-a-single-test-file","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Running a single test file"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also run a single test file by modifying the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"files"}]},{"type":"text","value":" glob. Re-open the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"japaFile.ts"}]},{"type":"text","value":" file and adding the following method inside it."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"japaFile.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token comment\">// Import helpers from path module</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> join<span class=\"token punctuation\">,</span> isAbsolute<span class=\"token punctuation\">,</span> sep <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'path'</span>\n\n<span class=\"token comment\">// Add this method to the file</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getTestFiles</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> userDefined <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>userDefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'build/test/**/*.spec.js'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isAbsolute</span><span class=\"token punctuation\">(</span>userDefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    userDefined <span class=\"token operator\">=</span> userDefined<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.ts'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">?</span> userDefined<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'..'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sep<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">:</span> userDefined<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sep<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">build/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>userDefined<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\.ts$|\\.js$/</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.js</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Next, replace the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"files"}]},{"type":"text","value":" glob with the output of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"getTestFiles"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"japaFile.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"dimer-highlight-code-line\">  files<span class=\"token operator\">:</span> <span class=\"token function\">getTestFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span>  before<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    runMigrations<span class=\"token punctuation\">,</span>\n    startHttpServer<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  after<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    rollbackMigrations<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"That's all! Now, you can specify the file path at the time of running the tests. For demonstration, lets create another test file and only execute tests inside the new file."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-sh","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token function\">touch</span> test/hello.spec.ts\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Open the newly created file and paste the following contents inside it."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"test/hello.spec.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> test <span class=\"token keyword\">from</span> <span class=\"token string\">'japa'</span>\n\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Japa'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'assert hello world'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>assert<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Finally, run the following command to execute just the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"hello.spec.ts"}]},{"type":"text","value":" file."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-sh","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"node build/japaFile.js test/hello.spec.ts\n"}]}]}]},{"type":"element","tag":"div","props":{"className":["embed","video"]},"children":[{"type":"element","tag":"video","props":{"controls":true},"children":[{"type":"element","tag":"source","props":{"src":"https://res.cloudinary.com/adonis-js/video/upload/v1592994611/adonisjs.com/blog/japa-selected-files_vmrtgh.mp4","type":"video/mp4"},"children":[]}]}]},{"type":"element","tag":"h2","props":{"id":"wrapping-up"},"children":[{"type":"element","tag":"a","props":{"href":"#wrapping-up","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Wrapping up"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As you can see, with just few lines of code inside the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"japaFile.ts"}]},{"type":"text","value":", we have been able to setup a pretty robust tests runner. Let me leave you with some more tips around testing."}]},{"type":"element","tag":"h3","props":{"id":"lifecycle-hooks"},"children":[{"type":"element","tag":"a","props":{"href":"#lifecycle-hooks","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Lifecycle hooks"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"test.group"}]},{"type":"text","value":" method of Japa allows you to hook into the lifecycle of tests by defining the following methods."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"test<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Example'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  group<span class=\"token punctuation\">.</span><span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before all tests'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  group<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before every test'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  group<span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after all tests'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  group<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after every test'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"using-global-database-transactions"},"children":[{"type":"element","tag":"a","props":{"href":"#using-global-database-transactions","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Using global database transactions"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A good test suite always ensures that every test starts with a clean slate. In order to have a clean database before each test, you can make use of the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Lucid global transactions"}]},{"type":"text","value":". For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> test <span class=\"token keyword\">from</span> <span class=\"token string\">'japa'</span>\n<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Example'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  group<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">beginGlobalTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  group<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">rollbackGlobalTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now, all of the database queries will be wrapped inside a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"global transaction"}]},{"type":"text","value":" and nothing will be persisted to the database ever."}]},{"type":"element","tag":"h3","props":{"id":"read-japa-docs"},"children":[{"type":"element","tag":"a","props":{"href":"#read-japa-docs","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Read Japa docs"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Finally, I suggest you to go through the "},{"type":"element","tag":"a","props":{"href":"https://github.com/thetutlage/japa#test-your-apps"},"children":[{"type":"text","value":"README"}]},{"type":"text","value":" file of Japa once to explore all the features which are not covered in this article."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"See ya!"},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"Virk"}]}]}
