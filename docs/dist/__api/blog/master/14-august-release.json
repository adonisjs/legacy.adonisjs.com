{"type":"root","children":[{"type":"element","tag":"dimertitle","props":{},"children":[{"type":"text","value":"August Release (2020)"}]},{"type":"element","tag":"h1","props":{"id":"august-release-2020"},"children":[{"type":"element","tag":"a","props":{"href":"#august-release-2020","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"August Release (2020)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the last few weeks, we have fixed a handful of issues and also shipped with some new features and improvements. This blog post summarizes the highlights of the release."}]},{"type":"element","tag":"div","props":{"className":["toc-container"]},"children":[{"type":"element","tag":"h2","props":{},"children":[{"type":"text","value":"Table of contents"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#orm-helpers-to-work-with-relationships"},"children":[{"type":"text","value":"ORM helpers to work with relationships"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#get-categories-list-with-counts-of-posts-inside-them"},"children":[{"type":"text","value":"Get categories list with counts of posts inside them"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#check-for-relationship-existence"},"children":[{"type":"text","value":"Check for relationship existence"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#preloading-group-limit"},"children":[{"type":"text","value":"Preloading group limit"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#new-validator-rules"},"children":[{"type":"text","value":"New validator rules"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#after-and-before-rules"},"children":[{"type":"text","value":"after and before rules"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#afterfield-and-beforefield-rules"},"children":[{"type":"text","value":"afterField and beforeField rules"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#blacklist"},"children":[{"type":"text","value":"blacklist"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#support-for-basic-auth"},"children":[{"type":"text","value":"Support for Basic Auth"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#trap-events"},"children":[{"type":"text","value":"Trap events"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"orm-helpers-to-work-with-relationships"},"children":[{"type":"element","tag":"a","props":{"href":"#orm-helpers-to-work-with-relationships","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"ORM helpers to work with relationships"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the true spirit of making it easier to work with Model relationships, we shipped new methods to "},{"type":"element","tag":"a","props":{"href":"/guides/model-relations/introduction#counting-related-rows"},"children":[{"type":"text","value":"count related rows"}]},{"type":"text","value":", "},{"type":"element","tag":"a","props":{"href":"/guides/model-relations/introduction#querying-relationship-existence"},"children":[{"type":"text","value":"check for relationship existence"}]},{"type":"text","value":" and apply "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"group limit"}]},{"type":"text","value":" during preload."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Imagining, you have a blog with "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"categories"}]},{"type":"text","value":", "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"posts"}]},{"type":"text","value":" and "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"comments"}]},{"type":"text","value":". Following are the code examples for some of the known use cases."}]},{"type":"element","tag":"h3","props":{"id":"get-categories-list-with-counts-of-posts-inside-them"},"children":[{"type":"element","tag":"a","props":{"href":"#get-categories-list-with-counts-of-posts-inside-them","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Get categories list with counts of posts inside them"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Many popular blogs shows the count of posts for a category or a tag."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"src":"https://res.cloudinary.com/adonis-js/image/upload/v1597042110/adonisjs.com/blog/categories_with_counts_efaxw1.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can achieve the similar results using the following query."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> categories <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Category\n  <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">withCount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n\ncategories<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>category<span class=\"token punctuation\">.</span>$extras<span class=\"token punctuation\">.</span>posts_count<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"check-for-relationship-existence"},"children":[{"type":"element","tag":"a","props":{"href":"#check-for-relationship-existence","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Check for relationship existence"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Another frequent use case is to limit the number of parent model records based upon the existence of its relationships."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For example: Show all posts that has received one or more comments."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Post\n  <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'comments'</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"has"}]},{"type":"text","value":" method has more variants. We recommend "},{"type":"element","tag":"a","props":{"href":"/guides/model-relations/introduction#counting-related-rows"},"children":[{"type":"text","value":"reading the docs"}]},{"type":"text","value":" for same."}]},{"type":"element","tag":"h3","props":{"id":"preloading-group-limit"},"children":[{"type":"element","tag":"a","props":{"href":"#preloading-group-limit","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Preloading group limit"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"groupLimit"}]},{"type":"text","value":" method uses "},{"type":"element","tag":"a","props":{"href":"https://www.sqlservertutorial.net/sql-server-window-functions/sql-server-row_number-function/"},"children":[{"type":"text","value":"SQL window functions"}]},{"type":"text","value":" to limit the number of rows for preloaded relationships."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Continuing with the blog categories and the posts example. Lets fetch all categories, along with the latest 3 posts in each category."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> categories <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Category\n  <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    posts\n      <span class=\"token punctuation\">.</span><span class=\"token function\">groupOrderBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'posts.created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">groupLimit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 👈</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"groupLimit"}]},{"type":"text","value":" is not similar to just applying the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"limit"}]},{"type":"text","value":" clause on the query. The regular limit clause will fetch a total of 3 posts across all the categories. Whereas, we want 3 post from each category."}]},{"type":"element","tag":"h2","props":{"id":"new-validator-rules"},"children":[{"type":"element","tag":"a","props":{"href":"#new-validator-rules","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"New validator rules"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The validator has received a bunch of new validation rules related to date-time validation."}]},{"type":"element","tag":"h3","props":{"id":"after-and-before-rules"},"children":[{"type":"element","tag":"a","props":{"href":"#after-and-before-rules","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"after"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"before"}]},{"type":"text","value":" rules"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"after"}]},{"type":"text","value":" and the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"before"}]},{"type":"text","value":" rules allows you to enforce a date to be after/before a specified date time or offset. Example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  checkin_date<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    rules<span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'days'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also use the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"today"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"tomorrow"}]},{"type":"text","value":" keywords with the after "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"rule"}]},{"type":"text","value":"."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  checkin_date<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    rules<span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token string\">'today'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Similarly, the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"before"}]},{"type":"text","value":" rule enforces the date to be before the specified date or offset."}]},{"type":"element","tag":"h3","props":{"id":"afterfield-and-beforefield-rules"},"children":[{"type":"element","tag":"a","props":{"href":"#afterfield-and-beforefield-rules","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"afterField"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"beforeField"}]},{"type":"text","value":" rules"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Another variant is to compare the date with the value of an existing field. This is super helpful for forms with "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"before"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"after"}]},{"type":"text","value":" date columns."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  checkin_date<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    rules<span class=\"token punctuation\">.</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token string\">'today'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n<span class=\"dimer-highlight-code-line\">  checkout_date<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span></span><span class=\"dimer-highlight-code-line\">    rules<span class=\"token punctuation\">.</span><span class=\"token function\">afterField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'checkin_date'</span><span class=\"token punctuation\">)</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"blacklist"},"children":[{"type":"element","tag":"a","props":{"href":"#blacklist","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"blacklist"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"blacklist"}]},{"type":"text","value":" rule dis-allows certain values. It is the opposite of the enum schema type. A practical use case is to blacklist certain usernames."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    rules<span class=\"token punctuation\">.</span><span class=\"token function\">blacklist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'super'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'bot'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'hacker'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"support-for-basic-auth"},"children":[{"type":"element","tag":"a","props":{"href":"#support-for-basic-auth","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Support for Basic Auth"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We have also added the another auth driver that uses the HTTP basic auth for authenticating requests. Using it is as simple as dropping the auth middleware on a route."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"start/routes.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Route\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> auth <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You are logged in as </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>auth<span class=\"token punctuation\">.</span>user<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>email<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token string\">'auth:basic'</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"div","props":{"className":["embed","video"]},"children":[{"type":"element","tag":"video","props":{"controls":true},"children":[{"type":"element","tag":"source","props":{"src":"https://res.cloudinary.com/adonis-js/video/upload/q_80/v1597034375/adonisjs.com/adonis-basic-auth_n8ierd.mp4","type":"video/mp4"},"children":[]}]}]},{"type":"element","tag":"h2","props":{"id":"trap-events"},"children":[{"type":"element","tag":"a","props":{"href":"#trap-events","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Trap events"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"One of the primary goals of AdonisJS is to make it easier for you to test your applications. That's why along with the option of trapping emails, we now "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"also allow trapping emitter events"}]},{"type":"text","value":"."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/User'</span>\n<span class=\"token keyword\">import</span> Event <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/Event'</span>\n\nEvent<span class=\"token punctuation\">.</span><span class=\"token function\">trap</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new:user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">instanceOf</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To trap all the events, you can make use of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"trapAll"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Event<span class=\"token punctuation\">.</span><span class=\"token function\">trapAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Once done with the test, you can call the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"restore"}]},{"type":"text","value":" method to dispose traps."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Event<span class=\"token punctuation\">.</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n"}]}]}]}]}
