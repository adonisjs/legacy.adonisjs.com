{"type":"root","children":[{"type":"element","tag":"dimertitle","props":{},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"h1","props":{"id":"introduction"},"children":[{"type":"element","tag":"a","props":{"href":"#introduction","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Along with the Database query builder, Lucid also comes with an implementation of "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Active_record_pattern"},"children":[{"type":"text","value":"Active record pattern"}]},{"type":"text","value":" to simplify the database interactions. By the end of this guide, you will know:"}]},{"type":"element","tag":"div","props":{"className":["toc-container"]},"children":[{"type":"element","tag":"h2","props":{},"children":[{"type":"text","value":"Table of contents"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#what-is-active-record-pattern"},"children":[{"type":"text","value":"What is Active record pattern?"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#lucid-implementation"},"children":[{"type":"text","value":"Lucid implementation"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#creating-your-first-model"},"children":[{"type":"text","value":"Creating your first model"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#faqs"},"children":[{"type":"text","value":"FAQ's"}]}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"More about the Active record pattern"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Difference between Data models and Database query builder"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The API exposed by Lucid to manipulate data stored in a relational database"}]}]},{"type":"element","tag":"h2","props":{"id":"what-is-active-record-pattern"},"children":[{"type":"element","tag":"a","props":{"href":"#what-is-active-record-pattern","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"What is Active record pattern?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Active Record is also the name of the ORM used by Ruby on Rails. However, the Active record pattern is a broader concept that can be implemented by any programming language or framework."}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Whenever we say the term "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Active record"}]},{"type":"text","value":", we are pointing towards the pattern itself and not the implementation of Rails."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The Active record pattern advocates to encapsulate the database interactions to language specific objects or classes. Each database table gets its own model and each instance of that class represents a database row."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The data models cleans up a lot of database interactions, since you can encode most of the behavior inside your models vs writing it everywhere inside your codebase."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For example: Your "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"users"}]},{"type":"text","value":" table has a date field and you want to format that before sending it back to the client. "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"This is how your code may look like without using data models"}]},{"type":"text","value":"."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DateTime <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'luxon'</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">.</span>dob <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span><span class=\"token function\">fromJSDate</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>dob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dd LLL yyyy'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> user\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When using data models, you can encode the date formatting action within the model vs writing it everywhere you fetch and return users."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DateTime <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'luxon'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BaseModel<span class=\"token punctuation\">,</span> column <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Orm'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseModel</span> <span class=\"token punctuation\">{</span>\n  @column<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">serialize</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dd LLL yyyy'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> dob<span class=\"token operator\">:</span> DateTime\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"And use it as follows:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// date is formatted during `toJSON` call</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This is just one example, but it does convey the gist of using Models."}]},{"type":"element","tag":"h2","props":{"id":"lucid-implementation"},"children":[{"type":"element","tag":"a","props":{"href":"#lucid-implementation","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Lucid implementation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lucid offers you a rich API for modeling your database interactions and relationships using data models. It has the ability to:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Define models and "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"persist"}]},{"type":"text","value":", "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"fetch"}]},{"type":"text","value":" or "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"delete"}]},{"type":"text","value":" their data."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Handle relationships between multiple models."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Serialize models to JSON with option to customize the serialization process."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Exposes API to hook into the database operations life-cycle."}]}]},{"type":"element","tag":"h2","props":{"id":"creating-your-first-model"},"children":[{"type":"element","tag":"a","props":{"href":"#creating-your-first-model","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Creating your first model"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Assuming you already have lucid "},{"type":"element","tag":"a","props":{"href":"/guides/database/setup"},"children":[{"type":"text","value":"setup"}]},{"type":"text","value":", run the following command to create your first data model."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-sh","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"node ace make:model User\n\n<span class=\"token comment\"># ✔  create    app/Models/User.ts</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"make:model"}]},{"type":"text","value":" command creates a new model inside "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"app/Models"}]},{"type":"text","value":" directory with the following contents inside it."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DateTime <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'luxon'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BaseModel<span class=\"token punctuation\">,</span> column <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Orm'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseModel</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">column</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isPrimary<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n\n  @column<span class=\"token punctuation\">.</span><span class=\"token function\">dateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> autoCreate<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> createdAt<span class=\"token operator\">:</span> DateTime\n\n  @column<span class=\"token punctuation\">.</span><span class=\"token function\">dateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> autoCreate<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> autoUpdate<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> updatedAt<span class=\"token operator\">:</span> DateTime\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Every model must extend the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"BaseModel"}]},{"type":"text","value":" class."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The table name is the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"all lowercase"}]},{"type":"text","value":" and "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"plural form"}]},{"type":"text","value":" of the model name. However, you can define it manually as well."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseModel</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> table <span class=\"token operator\">=</span> <span class=\"token string\">'auth_users'</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The properties using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"@column"}]},{"type":"text","value":" decorator are the table column names. They are defined as "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"camelCase"}]},{"type":"text","value":" inside the model and as "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"snake_case"}]},{"type":"text","value":" inside the table, but can also be customized."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseModel</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">column</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isPrimary<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> columnName<span class=\"token operator\">:</span> <span class=\"token string\">'user_id'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"faqs"},"children":[{"type":"element","tag":"a","props":{"href":"#faqs","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"FAQ's"}]},{"type":"element","tag":"div","props":{"className":["collapsible"]},"children":[{"type":"element","tag":"div","props":{"className":["collapsible-toggle"]},"children":[{"type":"text","value":"Does models creates the database tables automatically?"}]},{"type":"element","tag":"div","props":{"className":["collapsible-content"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"No. We do not sync your models with the database. Creating/altering tables must be done using "},{"type":"element","tag":"a","props":{"href":"/guides/database/migrations"},"children":[{"type":"text","value":"migrations"}]},{"type":"text","value":". Here are some of the reasons for not using models to create database schema."}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Generating database tables from models means will make them bloated with all the database level configuration that you don't even need after generating table."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Not every database change is as simple as renaming a column. There are scenarios, in which you want to migrate data from one table to another during re-structuring and this cannot/should not be expressed within models."}]}]}]}]},{"type":"element","tag":"div","props":{"className":["collapsible"]},"children":[{"type":"element","tag":"div","props":{"className":["collapsible-toggle"]},"children":[{"type":"text","value":"I am coming from TypeORM, how should I define column types?"}]},{"type":"element","tag":"div","props":{"className":["collapsible-content"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You do not. We follow the approach of "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"lean models"}]},{"type":"text","value":" and do not define database level types and constraints inside models."}]}]}]}]}
