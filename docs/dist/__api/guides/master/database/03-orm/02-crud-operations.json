{"type":"root","children":[{"type":"element","tag":"dimertitle","props":{},"children":[{"type":"text","value":"CRUD Operations"}]},{"type":"element","tag":"h1","props":{"id":"crud-operations"},"children":[{"type":"element","tag":"a","props":{"href":"#crud-operations","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"CRUD Operations"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"CRUD is an acronym for "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Create"}]},{"type":"text","value":", "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Read"}]},{"type":"text","value":", "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Update"}]},{"type":"text","value":" and "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Delete"}]},{"type":"text","value":". Lucid models out of the box comes with the API required to perform CRUD operations. By the end of this guide, you will know:"}]},{"type":"element","tag":"div","props":{"className":["toc-container"]},"children":[{"type":"element","tag":"h2","props":{},"children":[{"type":"text","value":"Table of contents"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#create"},"children":[{"type":"text","value":"Create"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#read"},"children":[{"type":"text","value":"Read"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#using-shorthand-methods"},"children":[{"type":"text","value":"Using shorthand methods"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#using-the-query-builder"},"children":[{"type":"text","value":"Using the Query Builder"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#update"},"children":[{"type":"text","value":"Update"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#why-not-use-the-update-query-directly"},"children":[{"type":"text","value":"Why not use the update query directly"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#delete"},"children":[{"type":"text","value":"Delete"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#find-or-create"},"children":[{"type":"text","value":"Find Or Create"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#firstorcreate"},"children":[{"type":"text","value":"firstOrCreate"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#fetchorcreatemany"},"children":[{"type":"text","value":"fetchOrCreateMany"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#update-or-create"},"children":[{"type":"text","value":"Update Or Create"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#updateorcreate"},"children":[{"type":"text","value":"updateOrCreate"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#updateorcreatemany"},"children":[{"type":"text","value":"updateOrCreateMany"}]}]}]}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How to perform basic CRUD operations"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Using the query builder with Models to construct advanced queries"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How and when to use methods like "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"findOrCreate"}]},{"type":"text","value":", "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"createOrUpdate"}]},{"type":"text","value":" and so on."}]}]},{"type":"element","tag":"h2","props":{"id":"create"},"children":[{"type":"element","tag":"a","props":{"href":"#create","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Create"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can insert new rows to the database by using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Model.create"}]},{"type":"text","value":" method or by assigning properties to the model instance. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/User'</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> <span class=\"token string\">'virk'</span>\nuser<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token string\">'virk@adonisjs.com'</span>\n\n<span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>$isPersisted<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"user.save"}]},{"type":"text","value":" method will perform the insert query."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"user.$isPersisted"}]},{"type":"text","value":" flag returns "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"true"}]},{"type":"text","value":" when the values has been persisted to the database."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Another option is to make use of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"create"}]},{"type":"text","value":" method on the Model class itself."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/User'</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">'virk'</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">'virk@adonisjs.com'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>$isPersisted<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"read"},"children":[{"type":"element","tag":"a","props":{"href":"#read","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Read"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The read operations can be performed using the shortcut methods defined on the Model or by using the query builder. Let's explore both"}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"All queries executed using a Model returns an "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"array of Model instances"}]},{"type":"text","value":" and "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"not plain JavaScript objects"}]},{"type":"text","value":". This is one of the differences between the standard query builder and the Model query builder."}]}]},{"type":"element","tag":"h3","props":{"id":"using-shorthand-methods"},"children":[{"type":"element","tag":"a","props":{"href":"#using-shorthand-methods","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Using shorthand methods"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Following are some of the shorthand methods to query the table associated with the model."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// SQL: SELECT * from \"users\" ORDER BY \"id\" DESC;</span>\n"}]}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// SQL: SELECT * from \"users\" WHERE \"id\" = 1 LIMIT 1;</span>\n"}]}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findBy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'virk@adonisjs.com'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// SQL: SELECT * from \"users\" WHERE \"email\" = 'virk@adonisjs.com' LIMIT 1;</span>\n"}]}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// SQL: SELECT * from \"users\" LIMIT 1;</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"All of the above methods except "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"all"}]},{"type":"text","value":" comes with a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"orFail"}]},{"type":"text","value":" variation. Normally, when a row is not found, the query will return "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"null"}]},{"type":"text","value":". However, you can make it raise an exception instead of returning "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"null"}]},{"type":"text","value":"."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOrFail</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">firstOrFail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findByOrFail</span><span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'virk@adonisjs.com'</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"orFail"}]},{"type":"text","value":" variation will raise an "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"E_ROW_NOT_FOUND"}]},{"type":"text","value":" exception with "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"404"}]},{"type":"text","value":" statusCode. You can also "},{"type":"element","tag":"a","props":{"href":"/guides/http/exception-handling#the-handle-method"},"children":[{"type":"text","value":"manually handle"}]},{"type":"text","value":" this exception to convert it to a desired response."}]},{"type":"element","tag":"h3","props":{"id":"using-the-query-builder"},"children":[{"type":"element","tag":"a","props":{"href":"#using-the-query-builder","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Using the Query Builder"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also use the standard query builder API with your models, and this makes models a lot more powerful, since you are not only limited to a handful of opinionated methods."}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Even when using the query builder, the result will always contain "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"model instance(s)"}]},{"type":"text","value":" and not plain JavaScript object(s)."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can get an instance of query builder for your model using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":".query"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User\n  <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 👈now have access to all query builder methods</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'country_code'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'IN'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">orWhereNull</span><span class=\"token punctuation\">(</span><span class=\"token string\">'country_code'</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To fetch a single row, you can make use of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":".first"}]},{"type":"text","value":" method. There is also a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"firstOrFail"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User\n  <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'country_code'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'IN'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">orWhereNull</span><span class=\"token punctuation\">(</span><span class=\"token string\">'country_code'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 👈 Adds `LIMIT 1` clause</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"update"},"children":[{"type":"element","tag":"a","props":{"href":"#update","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Update"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The standard way to perform updates using the model is to first lookup the record and then update/persist it to the database."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOrFail</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span>last_login_at <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span><span class=\"token function\">local</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Luxon dateTime is used</span>\n\n<span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"why-not-use-the-update-query-directly"},"children":[{"type":"element","tag":"a","props":{"href":"#why-not-use-the-update-query-directly","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Why not use the update query directly"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Another way to update the records is to manually perform an update using the query builder. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> last_login_at<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When using the above approach, you will miss a lot of models niceties."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You will not be able to use the hooks API."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You cannot use the luxon "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"DateTime"}]},{"type":"text","value":" helpers."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"updated_at"}]},{"type":"text","value":" column will not be updated, unless you manually update it or use a database level trigger."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We recommend not stressing much on the extra "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"select"}]},{"type":"text","value":" query unless you are dealing with millions of updates per second and happy leaving the models features."}]},{"type":"element","tag":"h2","props":{"id":"delete"},"children":[{"type":"element","tag":"a","props":{"href":"#delete","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Delete"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Similar to the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"update"}]},{"type":"text","value":" operation, in order to delete a row, you first fetch it from the database. For example"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOrFail</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Again, in order for hooks to work, Lucid needs the instance of the model first. If you decide to use the query builder directly, then no hooks will be fired."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"However, the direct query builder approach can be helpful for performing bulk deletes."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'is_verified'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"find-or-create"},"children":[{"type":"element","tag":"a","props":{"href":"#find-or-create","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Find Or Create"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Models comes a lot of helpful methods to simplify the record creation by first finding them inside the database and performing the create query, only when the record doesn't exists."}]},{"type":"element","tag":"h3","props":{"id":"firstorcreate"},"children":[{"type":"element","tag":"a","props":{"href":"#firstorcreate","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"firstOrCreate"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Search for record inside the database and create a new one, when the lookup fails."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the following example, we attempt to search a user with an email, but persist both the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"email"}]},{"type":"text","value":" and the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"password"}]},{"type":"text","value":", when the initial lookup fails. In other words, the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"searchPayload"}]},{"type":"text","value":" and the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"savePayload"}]},{"type":"text","value":" are merged during the create call."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/User'</span>\n\n<span class=\"token keyword\">const</span> searchPayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> <span class=\"token string\">'virk@adonisjs.com'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> savePayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> password<span class=\"token operator\">:</span> <span class=\"token string\">'secret'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">firstOrCreate</span><span class=\"token punctuation\">(</span>searchPayload<span class=\"token punctuation\">,</span> savePayload<span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"fetchorcreatemany"},"children":[{"type":"element","tag":"a","props":{"href":"#fetchorcreatemany","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"fetchOrCreateMany"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"fetchOrCreateMany"}]},{"type":"text","value":" is similar to the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"firstOrCreate"}]},{"type":"text","value":" method, but instead you can create more than one rows. "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"This method is great for creating missing records"}]},{"type":"text","value":"."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You need to define a unique key as the first argument. The value for this key is used to determine, if the record exists in the database or not."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The 2nd argument is an array of records to persist, but only the missing one's."}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/User'</span>\n\n<span class=\"token keyword\">const</span> usersToCreate <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">'foo@example.com'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">'bar@example.com'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">'baz@example.com'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">fetchOrCreateMany</span><span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span> usersToCreate<span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"update-or-create"},"children":[{"type":"element","tag":"a","props":{"href":"#update-or-create","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Update Or Create"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The update or create operations are similar in nature to the find or create, but instead, the existing rows inside the database are also updated."}]},{"type":"element","tag":"h3","props":{"id":"updateorcreate"},"children":[{"type":"element","tag":"a","props":{"href":"#updateorcreate","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"updateOrCreate"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Search for record inside the database and update it, or create a new one, when no record has been found."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/User'</span>\n\n<span class=\"token keyword\">const</span> searchPayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> email<span class=\"token operator\">:</span> <span class=\"token string\">'virk@adonisjs.com'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> persistancePayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> password<span class=\"token operator\">:</span> <span class=\"token string\">'secret'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">updateOrCreate</span><span class=\"token punctuation\">(</span>searchPayload<span class=\"token punctuation\">,</span> savePayload<span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"updateorcreatemany"},"children":[{"type":"element","tag":"a","props":{"href":"#updateorcreatemany","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"updateOrCreateMany"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"updateOrCreateMany"}]},{"type":"text","value":" method is a great candidate for sync rows by avoid duplicate entries."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You need to define a unique key as the first argument. The value for this key is used to determine, if the record exists in the database or not."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The 2nd argument is an array of records to persist."}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/User'</span>\n\n<span class=\"token keyword\">const</span> usersToCreate <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">'foo@example.com'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">'bar@example.com'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    email<span class=\"token operator\">:</span> <span class=\"token string\">'baz@example.com'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">updateOrCreateMany</span><span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span> usersToCreate<span class=\"token punctuation\">)</span>\n"}]}]}]}]}
