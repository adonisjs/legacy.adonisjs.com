{"type":"root","children":[{"type":"element","tag":"dimertitle","props":{},"children":[{"type":"text","value":"Connections Management"}]},{"type":"element","tag":"h1","props":{"id":"connections-management"},"children":[{"type":"element","tag":"a","props":{"href":"#connections-management","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Connections Management"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Database connections in Lucid are fully managed using the inbuilt "},{"type":"element","tag":"a","props":{"href":"https://github.com/adonisjs/adonis-lucid/blob/develop/src/Connection/Manager.ts"},"children":[{"type":"text","value":"connection manager"}]},{"type":"text","value":" and you never have to deal with their life cycle manually."}]},{"type":"element","tag":"div","props":{"className":["toc-container"]},"children":[{"type":"element","tag":"h2","props":{},"children":[{"type":"text","value":"Table of contents"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#how-connections-are-defined"},"children":[{"type":"text","value":"How connections are defined?"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#connections-lifecycle"},"children":[{"type":"text","value":"Connections LifeCycle"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#connection-pooling"},"children":[{"type":"text","value":"Connection Pooling"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#readwrite-replicas"},"children":[{"type":"text","value":"Read/Write Replicas"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#choosing-connection-modes"},"children":[{"type":"text","value":"Choosing Connection Modes"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#switching-between-connections"},"children":[{"type":"text","value":"Switching Between Connections"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#on-demand-connections"},"children":[{"type":"text","value":"On Demand Connections"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#finding-the-connection-details"},"children":[{"type":"text","value":"Finding the Connection Details"}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"By the end of this guide you will know:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How connections are internally managed by Lucid."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Difference between connections and pools."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How read/write replicas work."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How to register connections on-demand."}]}]},{"type":"element","tag":"h2","props":{"id":"how-connections-are-defined"},"children":[{"type":"element","tag":"a","props":{"href":"#how-connections-are-defined","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"How connections are defined?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"All of the database connections are defined inside the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"config/database.ts"}]},{"type":"text","value":" file. By default, this file contains a sample configuration for multiple database backends, but you can remove the connections you are not planning to use."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Each connection must specify a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"client"}]},{"type":"text","value":", which determines the database backend to be used. Following is the list of available clients."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"sqlite"}]},{"type":"text","value":" or "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"sqlite3"}]},{"type":"text","value":" for SQlite."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"mysql"}]},{"type":"text","value":" for MySQL."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"pg"}]},{"type":"text","value":" for PostgreSQL."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"redshift"}]},{"type":"text","value":" for Amazon Redshift."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"oracledb"}]},{"type":"text","value":" for Oracle."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"mssql"}]},{"type":"text","value":" for SQL server."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"After defining the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"client"}]},{"type":"text","value":", you will have to define the connection options. Read the "},{"type":"element","tag":"a","props":{"href":"setup#configure-sqlite"},"children":[{"type":"text","value":"setup guide"}]},{"type":"text","value":" to learn about the connection options for each client."}]},{"type":"element","tag":"h3","props":{"id":"connections-lifecycle"},"children":[{"type":"element","tag":"a","props":{"href":"#connections-lifecycle","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Connections LifeCycle"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The database connections are lazy loaded. It means, until you execute a query, the database connection is not created. You can check the state of connections using the connection manager."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Database<span class=\"token punctuation\">.</span>manager<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sqlite'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?.</span>state<span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"get"}]},{"type":"text","value":" method accepts the name of the connection defined inside the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"connections"}]},{"type":"text","value":" object in "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"config/database.ts"}]},{"type":"text","value":" file. A connection will always be in one of the following four states."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"registered"}]},{"type":"text","value":": The connection is registered within the manager, but not initiated yet."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"open"}]},{"type":"text","value":": The connection instance has been created and ready for executing queries."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"migration"}]},{"type":"text","value":": The connection gets into the migration state, when you update the connection config programmatically. During the migration state, the connection waits for existing queries to finish, then disconnect and re-connect using the new config."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"closed"}]},{"type":"text","value":": The connection is closed but still tracked by the connection manager. Closed connections cannot execute queries."}]}]},{"type":"element","tag":"h2","props":{"id":"connection-pooling"},"children":[{"type":"element","tag":"a","props":{"href":"#connection-pooling","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Connection Pooling"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Connection_pool"},"children":[{"type":"text","value":"Connection pooling"}]},{"type":"text","value":" is a standard practice of maintaining minimum and maximum connections with the database server."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The minimum connections are maintained for improving the application performance. Establishing a new connection every time is an expensive operation and hence it is recommended to always have couple of connections ready to execute the database queries."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The maximum connections are defined to ensure that your application doesn't overwhelms the database server with too many concurrent connections."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When the pool is full, AdonisJS will queue new queries and waits for the pool to have free resources until the configured timeout. The default timeout is set to "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"60 seconds"}]},{"type":"text","value":" and can be configured using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"pool.acquireTimeoutMillis"}]},{"type":"text","value":" property."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  mysql<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    client<span class=\"token operator\">:</span> <span class=\"token string\">'mysql'</span><span class=\"token punctuation\">,</span>\n    connection<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    pool<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"dimer-highlight-code-line\">      acquireTimeoutMillis<span class=\"token operator\">:</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"div","props":{"className":["alert","alert-tip"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Bigger the pool size, better the performance, is a mis-conception. We recommend you to read this "},{"type":"element","tag":"a","props":{"href":"https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing"},"children":[{"type":"text","value":"document"}]},{"type":"text","value":" to understand how smaller pool size can boost the application performance."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can configure the pool settings for a given connection inside the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"config/database.ts"}]},{"type":"text","value":" file."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"config/database.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  connections<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    mysql<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      client<span class=\"token operator\">:</span> <span class=\"token string\">'mysql'</span><span class=\"token punctuation\">,</span>\n      connection<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"dimer-highlight-code-line\">      pool<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">        min<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">        max<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>      healthCheck<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"readwrite-replicas"},"children":[{"type":"element","tag":"a","props":{"href":"#readwrite-replicas","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Read/Write Replicas"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"AdonisJS supports read/write replicas as first class citizen. You can configure one write database server, along with multiple read servers. For example:"}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"All read queries are automatically sent to one of the read servers and no manual work is required."}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  connections<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    mysql<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      connection<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        user<span class=\"token operator\">:</span> Env<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DB_USER'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lucid'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n        password<span class=\"token operator\">:</span> Env<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DB_PASSWORD'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lucid'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n        database<span class=\"token operator\">:</span> Env<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DB_NAME'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'lucid'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"dimer-highlight-code-line\">      replicas<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">        read<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">          connection<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span><span class=\"dimer-highlight-code-line\">            <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">              host<span class=\"token operator\">:</span> <span class=\"token string\">'192.168.1.1'</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">            <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">              host<span class=\"token operator\">:</span> <span class=\"token string\">'192.168.1.2'</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">          <span class=\"token punctuation\">]</span></span><span class=\"dimer-highlight-code-line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">        write<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">          connection<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">            host<span class=\"token operator\">:</span> <span class=\"token string\">'196.168.1.3'</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lucid will merge the main "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"connection"}]},{"type":"text","value":" object with the replicas individual connection objects. So, you can keep shared values like "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"username"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"password"}]},{"type":"text","value":" in the main connection object."}]},{"type":"element","tag":"h4","props":{"id":"points-to-note"},"children":[{"type":"element","tag":"a","props":{"href":"#points-to-note","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Points to note"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Lucid doesn't replicate data from write to read servers. You will have to rely on your database server for that."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Based upon your database server performance and settings, the data written to the write server may not be available to the read servers right away."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"AdonisJS uses round robin to equally distribute the traffic between the read servers."}]}]},{"type":"element","tag":"h3","props":{"id":"choosing-connection-modes"},"children":[{"type":"element","tag":"a","props":{"href":"#choosing-connection-modes","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Choosing Connection Modes"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lucid allows you to run queries in one of the following connection modes."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"dual"}]},{"type":"text","value":": Read queries are sent to the read server and write queries are sent to the write server."}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"read"}]},{"type":"text","value":": Only read queries are allowed."}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"write"}]},{"type":"text","value":": Both read and write queries are sent to the write server."}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Flexibility to choose between the available modes is helpful when you want subsequent write and read calls to always to always use the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"write"}]},{"type":"text","value":" server. For example: Reading the list of users right after adding a new user."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n\n<span class=\"token keyword\">await</span> Database\n  <span class=\"token punctuation\">.</span><span class=\"token function\">connection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mysql'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> mode<span class=\"token operator\">:</span> <span class=\"token string\">'write'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'virk'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">await</span> Database\n  <span class=\"token punctuation\">.</span><span class=\"token function\">connection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mysql'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> mode<span class=\"token operator\">:</span> <span class=\"token string\">'write'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"switching-between-connections"},"children":[{"type":"element","tag":"a","props":{"href":"#switching-between-connections","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Switching Between Connections"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can switch between pre-registered connections using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Database.connection"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n\n<span class=\"token keyword\">const</span> mysqlConnection <span class=\"token operator\">=</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">connection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mysql'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> anotherConnection <span class=\"token operator\">=</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">connection</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some-other-connection'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> defaultConnection <span class=\"token operator\">=</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">connection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Connections can also be passed to a Model query at runtime. For example"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/User'</span>\n\n<span class=\"token keyword\">await</span> User\n  <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> client<span class=\"token operator\">:</span> connection <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'virk'</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":""},"children":[{"type":"text","value":"Learn more"}]},{"type":"text","value":" about using connections with Models."}]},{"type":"element","tag":"h2","props":{"id":"on-demand-connections"},"children":[{"type":"element","tag":"a","props":{"href":"#on-demand-connections","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"On Demand Connections"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Many multi-tenant applications opt for separate database for every tenant. It means, if there are 1000 tenants, then each tenant will have a separate database or maybe a separate database server all together."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Knowing about all the tenants and their database configuration upfront is not possible and therefore Lucid allows you to register dynamic database (each having a unique name) and use them through out your application."}]},{"type":"element","tag":"h3","props":{"id":"finding-the-connection-details"},"children":[{"type":"element","tag":"a","props":{"href":"#finding-the-connection-details","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Finding the Connection Details"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The first step is to identify the tenant and then load their database configuration. How you identify the tenant majorly depends on your application architecture. Some common ways are:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Identify them using a subdomain"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Append a tenant query string to all URLs"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Or store it inside a session"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For the sake of simplicity, we will read the tenant details from the query string and then inside a middleware, we will fetch the database configuration and register the connection with a unique name."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"app/Middleware/TenantDb.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> HttpContextContract <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/HttpContext'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TenantDb</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">handle</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">:</span> HttpContextContract<span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">const</span> tenantId <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tenant'</span><span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">abortIf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tenantId<span class=\"token punctuation\">,</span> <span class=\"token string\">'Define tenant id using the query string'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// You may fetch it from a master database</span>\n    <span class=\"token keyword\">const</span> tenantConnectionConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      client<span class=\"token operator\">:</span> <span class=\"token string\">'mysql'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">,</span>\n      connection<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        host<span class=\"token operator\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span>\n        port<span class=\"token operator\">:</span> <span class=\"token number\">3306</span><span class=\"token punctuation\">,</span>\n        user<span class=\"token operator\">:</span> <span class=\"token string\">'tenant_user'</span><span class=\"token punctuation\">,</span>\n        password<span class=\"token operator\">:</span> <span class=\"token string\">'tenant_password'</span><span class=\"token punctuation\">,</span>\n        database<span class=\"token operator\">:</span> <span class=\"token string\">'tenant_db'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> connectionName <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">tenant_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tenantId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Database<span class=\"token punctuation\">.</span>manager<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>connectionName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Database<span class=\"token punctuation\">.</span>manager<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>connectionName<span class=\"token punctuation\">,</span> tenantConnectionConfig<span class=\"token punctuation\">)</span>\n      Database<span class=\"token punctuation\">.</span>manager<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>connectionName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"h4","props":{"id":"what-just-happened"},"children":[{"type":"element","tag":"a","props":{"href":"#what-just-happened","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"What just happened?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The middleware for registering the connection has a lot going on. Let's discuss it line by line."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"We read the tenant id using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"request.input"}]},{"type":"text","value":" method and if it's not defined, we abort the request using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"response.abortIf"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Next, we need the configuration for creating a database connection. Even though the config is hard coded in this example, it can come from anywhere."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Next, we check to see if that connection for this tenant has already been registered using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Database.has"}]},{"type":"text","value":" method. If not, we register one using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Database.add"}]},{"type":"text","value":" method."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Next step is to register the middleware inside "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"start/kernel.ts"}]},{"type":"text","value":" file."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"start/kernel.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"],"dataLine":"3"},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Server<span class=\"token punctuation\">.</span>middleware<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'Adonis/Core/BodyParserMiddleware'</span><span class=\"token punctuation\">,</span>\n<span class=\"dimer-highlight-code-line\">  <span class=\"token string\">'App/Middleware/TenantDb'</span><span class=\"token punctuation\">,</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Finally, you can use the database connection by using the unique connection name."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"app/Controllers/Http/UsersController.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> HttpContextContract <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/HttpContext'</span>\n<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/User'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UsersController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">index</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> request <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> HttpContextContract<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      connection<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">tenant_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tenant'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]}]}
