{"type":"root","children":[{"type":"element","tag":"dimertitle","props":{},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"h1","props":{"id":"introduction"},"children":[{"type":"element","tag":"a","props":{"href":"#introduction","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The data models in Lucid has out of the box support for working with relationships. You don't have to worry about writing complex SQL joins by yourself, just setup the relationships on your models and everything will work as expected."}]},{"type":"element","tag":"div","props":{"className":["toc-container"]},"children":[{"type":"element","tag":"h2","props":{},"children":[{"type":"text","value":"Table of contents"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#supported-relationships"},"children":[{"type":"text","value":"Supported relationships"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#defining-relationships"},"children":[{"type":"text","value":"Defining relationships"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#points-to-note"},"children":[{"type":"text","value":"Points to note"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#preloading-relationship"},"children":[{"type":"text","value":"Preloading relationship"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#preloading-multiple-relations"},"children":[{"type":"text","value":"Preloading multiple relations"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#relationship-constraints"},"children":[{"type":"text","value":"Relationship constraints"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#preloading-nested-relationship"},"children":[{"type":"text","value":"Preloading nested relationship"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#access-to-the-direct-query-builder"},"children":[{"type":"text","value":"Access to the direct query builder"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#querying-relationship-existence"},"children":[{"type":"text","value":"Querying relationship existence"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#other-relationship-existence-methods"},"children":[{"type":"text","value":"Other relationship existence methods"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#counting-related-rows"},"children":[{"type":"text","value":"Counting related rows"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#custom-count-alias"},"children":[{"type":"text","value":"Custom count alias"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#custom-aggregates"},"children":[{"type":"text","value":"Custom aggregates"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#on-query-hook"},"children":[{"type":"text","value":"On Query Hook"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#persisting-relations"},"children":[{"type":"text","value":"Persisting relations"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#using-create-method"},"children":[{"type":"text","value":"Using create method"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#avoid-duplicates-during-persistance"},"children":[{"type":"text","value":"Avoid duplicates during persistance"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#firstorcreate"},"children":[{"type":"text","value":"firstOrCreate"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#updateorcreate"},"children":[{"type":"text","value":"updateOrCreate"}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"By the end of this guide, you will know:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The types of relationships supported by Lucid"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How to define and query relationship"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How to preload relationships"}]}]},{"type":"element","tag":"h2","props":{"id":"supported-relationships"},"children":[{"type":"element","tag":"a","props":{"href":"#supported-relationships","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Supported relationships"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lucid supports the following relationships"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"HasOne"}]},{"type":"text","value":": User has one profile."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"HasMany"}]},{"type":"text","value":": User has many posts."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"BelongsTo"}]},{"type":"text","value":": A post belongs to a user."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"ManyToMany"}]},{"type":"text","value":": A post has many tags. Also a tag belongs to many post."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"HasManyThrough"}]},{"type":"text","value":": A team has many posts through the users of that team."}]}]},{"type":"element","tag":"h2","props":{"id":"defining-relationships"},"children":[{"type":"element","tag":"a","props":{"href":"#defining-relationships","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Defining relationships"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lets begin by creating two models and then define relationships between them. We will be using a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"hasOne"}]},{"type":"text","value":" relationship in this example. However, the process of defining relationship is same for every other relationship type."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-sh","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"node ace make:model User\nnode ace make:model Profile\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The User model."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"app/Models/User.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> column<span class=\"token punctuation\">,</span> BaseModel<span class=\"token punctuation\">,</span> hasOne<span class=\"token punctuation\">,</span> HasOne <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Orm'</span>\n<span class=\"token keyword\">import</span> Profile <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/Profile'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseModel</span> <span class=\"token punctuation\">{</span>\n<span class=\"dimer-highlight-code-line\">  @<span class=\"token function\">hasOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Profile<span class=\"token punctuation\">)</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token keyword\">public</span> profile<span class=\"token operator\">:</span> HasOne<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Profile<span class=\"token operator\">></span></span><span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The Profile model. It must have a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"userId"}]},{"type":"text","value":" foreign key column for the relationship to work."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"app/Models/Profile.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> column<span class=\"token punctuation\">,</span> BaseModel <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Orm'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Profile</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseModel</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> userId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"points-to-note"},"children":[{"type":"element","tag":"a","props":{"href":"#points-to-note","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Points to note"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"User"}]},{"type":"text","value":" model uses the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"hasOne"}]},{"type":"text","value":" decorator to setup the relationship with the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Profile"}]},{"type":"text","value":" model."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"It also uses a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"HasOne"}]},{"type":"text","value":" type on the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"profile"}]},{"type":"text","value":" property. It is required to "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"distinguish between relationships and other model properties"}]},{"type":"text","value":" for better intellisense support."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Profile"}]},{"type":"text","value":" model must have the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"userId"}]},{"type":"text","value":" foreign key column."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Similarly, you can use the following decorators and types to define other relationships."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  hasOne<span class=\"token punctuation\">,</span>\n  HasOne<span class=\"token punctuation\">,</span>\n  hasMany<span class=\"token punctuation\">,</span>\n  HasMany<span class=\"token punctuation\">,</span>\n  belongsTo<span class=\"token punctuation\">,</span>\n  BelongsTo<span class=\"token punctuation\">,</span>\n  manytoMany<span class=\"token punctuation\">,</span>\n  ManyToMany<span class=\"token punctuation\">,</span>\n  hasManyThrough<span class=\"token punctuation\">,</span>\n  HasManyThrough\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Orm'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseModel</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">hasOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Profile<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> profile<span class=\"token operator\">:</span> HasOne<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Profile<span class=\"token operator\">></span>\n\n  @<span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Team<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> team<span class=\"token operator\">:</span> BelongsTo<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Team<span class=\"token operator\">></span>\n\n  @<span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Post<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> posts<span class=\"token operator\">:</span> HasMany<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Post<span class=\"token operator\">></span>\n\n  @<span class=\"token function\">manyToMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Skill<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> skills<span class=\"token operator\">:</span> ManyToMany<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Skill<span class=\"token operator\">></span>\n\n  @<span class=\"token function\">hasManyThrough</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Project<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Team<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> projects<span class=\"token operator\">:</span> HasManyThrough<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Project<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"preloading-relationship"},"children":[{"type":"element","tag":"a","props":{"href":"#preloading-relationship","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Preloading relationship"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Preloading (or eager-loading) is one of the most common tasks you will perform when working with relationships. For example: Fetch all users along with their profile."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User\n  <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 👈</span>\n\nusers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also lazy-load relationships for an existing model instance. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token comment\">// Reference to logged in user</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> auth<span class=\"token punctuation\">.</span>user\n\n<span class=\"token comment\">// Preload profile for the user</span>\n<span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Access profile</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"preloading-multiple-relations"},"children":[{"type":"element","tag":"a","props":{"href":"#preloading-multiple-relations","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Preloading multiple relations"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Call the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"preload"}]},{"type":"text","value":" method for multiple times to preload multiple relationships."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User\n  <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// preload profile</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'emails'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// preload emails</span>\n\nusers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">)</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>emails<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"relationship-constraints"},"children":[{"type":"element","tag":"a","props":{"href":"#relationship-constraints","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Relationship constraints"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When preloading relationships, you can also define constraints by passing a callback as the 2nd parameter."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When fetching related data, you can also define constraints on the relationship query builder. In the following example, only the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"verified emails"}]},{"type":"text","value":" will be fetched from the database."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"User<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'emails'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  query<span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isVerified'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"preloading-nested-relationship"},"children":[{"type":"element","tag":"a","props":{"href":"#preloading-nested-relationship","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Preloading nested relationship"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can preload nested relationships by calling the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"preload"}]},{"type":"text","value":" method on the relationship query builder. Consider the following example."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> auth<span class=\"token punctuation\">.</span>user\n<span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  query<span class=\"token punctuation\">.</span><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'address'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"access-to-the-direct-query-builder"},"children":[{"type":"element","tag":"a","props":{"href":"#access-to-the-direct-query-builder","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Access to the direct query builder"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You are not only limited to preloading relationships. You can also get direct access to the relationship query builder as shown in the following example."}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Unlike preloading, the query results are returned directly and not persisted on the parent model instance."}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> activeEmails <span class=\"token operator\">=</span> user\n  <span class=\"token punctuation\">.</span><span class=\"token function\">related</span><span class=\"token punctuation\">(</span><span class=\"token string\">'emails'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isActive'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The same query builder can also be used to delete related rows."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"user<span class=\"token punctuation\">.</span><span class=\"token function\">related</span><span class=\"token punctuation\">(</span><span class=\"token string\">'emails'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isActive'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"querying-relationship-existence"},"children":[{"type":"element","tag":"a","props":{"href":"#querying-relationship-existence","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Querying relationship existence"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lucid simplifies the job of querying the relationship existence without writing the join queries manually by hand. Consider the following example"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> userWithTeams <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'team'</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also define the number of rows you expect the join query to return. For example: Select all users, who have enrolled for more than two courses."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> veterans <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'courses'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's take a step further and also add a constraint to select courses with 100% completion. This time, we will be using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"whereHas"}]},{"type":"text","value":" instead of "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"has"}]},{"type":"text","value":"."}]},{"type":"element","tag":"div","props":{"className":["alert","alert-tip"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"wherePivot"}]},{"type":"text","value":" method is only available for "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"manyToMany"}]},{"type":"text","value":" relationship and prefixes the pivot table name to prevent column name conflicts."}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> veterans <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User\n  <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">whereHas</span><span class=\"token punctuation\">(</span><span class=\"token string\">'courses'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    query<span class=\"token punctuation\">.</span><span class=\"token function\">wherePivot</span><span class=\"token punctuation\">(</span><span class=\"token string\">'completion_percentage'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"other-relationship-existence-methods"},"children":[{"type":"element","tag":"a","props":{"href":"#other-relationship-existence-methods","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Other relationship existence methods"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Following is the list of other similar methods to query the relationship existence."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"orHas"}]},{"type":"text","value":": Defines an "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"or where exists"}]},{"type":"text","value":" clause."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"doesntHave"}]},{"type":"text","value":": Opposite of "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"has"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"orDoesntHave"}]},{"type":"text","value":": Opposite of "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"orHas"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"orWhereHas"}]},{"type":"text","value":": Defines an "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"orWhere"}]},{"type":"text","value":" clause."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"whereDoesntHave"}]},{"type":"text","value":": Opposite of "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"whereHas"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"orWhereDoesntHave"}]},{"type":"text","value":": Opposite of "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"orWhereHas"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"h2","props":{"id":"counting-related-rows"},"children":[{"type":"element","tag":"a","props":{"href":"#counting-related-rows","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Counting related rows"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can make use of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"withCount"}]},{"type":"text","value":" method to count the number of related rows. For example: Count the number of posts a user has written."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withCount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now, you can access the count of posts as shown below."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"users<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>$extras<span class=\"token punctuation\">.</span>posts_count<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Moving forward, you can also define custom constraints to the count query. For example: Count only the number of "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"published posts"}]},{"type":"text","value":" a user has written."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withCount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  query<span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isPublished'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"custom-count-alias"},"children":[{"type":"element","tag":"a","props":{"href":"#custom-count-alias","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Custom count alias"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also define a custom alias for the count query results using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"as"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withCount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  query<span class=\"token punctuation\">.</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span><span class=\"token string\">'totalPosts'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nusers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>$extras<span class=\"token punctuation\">.</span>totalPosts<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"custom-aggregates"},"children":[{"type":"element","tag":"a","props":{"href":"#custom-aggregates","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Custom aggregates"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"withCount"}]},{"type":"text","value":" method is not only limited to the number of rows. You can also use a custom SQL aggregate method. For example: Get sum of total marks scored by a user."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withCount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exams'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  query<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token string\">'marks'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span><span class=\"token string\">'totalMarks'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nusers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>$extras<span class=\"token punctuation\">.</span>totalMarks<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"on-query-hook"},"children":[{"type":"element","tag":"a","props":{"href":"#on-query-hook","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"On Query Hook"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Every time you define a relationship, you can also attach an "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"onQuery"}]},{"type":"text","value":" hook with it and this can allow you to create variants of your relationship. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> column<span class=\"token punctuation\">,</span> BaseModel<span class=\"token punctuation\">,</span> hasMany<span class=\"token punctuation\">,</span> HasMany <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Orm'</span>\n<span class=\"token keyword\">import</span> UserEmail <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/UserEmail'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseModel</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> UserEmail<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> emails<span class=\"token operator\">:</span> HasMany<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> UserEmail<span class=\"token operator\">></span>\n\n<span class=\"dimer-highlight-code-line\">  @<span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> UserEmail<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">    <span class=\"token function-variable function\">onQuery</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> query<span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isActive'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token keyword\">public</span> activeEmails<span class=\"token operator\">:</span> HasMany<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> UserEmail<span class=\"token operator\">></span></span><span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As you can notice, we have defined two relationships on the same model. However, the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"activeEmails"}]},{"type":"text","value":" relationship adds a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"where"}]},{"type":"text","value":" constraint to limit the results to only active emails."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activeEmails'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// direct access</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> activeEmails <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">related</span><span class=\"token punctuation\">(</span><span class=\"token string\">'activeEmails'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"persisting-relations"},"children":[{"type":"element","tag":"a","props":{"href":"#persisting-relations","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Persisting relations"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lucid persist relationships as actions and not trees. Using actions allows you to tweak the persistance behavior by passing runtime arguments, whereas with trees, the behavior is always static."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here's an example of creating the user and their profile."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token string\">'virk@adonisjs.com'</span>\nuser<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token string\">'secret'</span>\n\n<span class=\"token keyword\">const</span> profile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nprofile<span class=\"token punctuation\">.</span>avatarUrl <span class=\"token operator\">=</span> <span class=\"token string\">'foo.jpg'</span>\nprofile<span class=\"token punctuation\">.</span>isActive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">related</span><span class=\"token punctuation\">(</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>profile<span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"related().save"}]},{"type":"text","value":" method will wrap both the insert calls inside a transaction. However, you can also define a custom transaction by setting it on the parent model. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token string\">'virk@adonisjs.com'</span>\nuser<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token string\">'secret'</span>\n\n<span class=\"token keyword\">const</span> profile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Profile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nprofile<span class=\"token punctuation\">.</span>avatarUrl <span class=\"token operator\">=</span> <span class=\"token string\">'foo.jpg'</span>\nprofile<span class=\"token punctuation\">.</span>isActive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n<span class=\"dimer-highlight-code-line\">user<span class=\"token punctuation\">.</span>$trx <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">related</span><span class=\"token punctuation\">(</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>profile<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span>$trx<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span>$trx<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When the transaction object is created by you, then the internals of Lucid will not "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"commit"}]},{"type":"text","value":" or "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"rollback"}]},{"type":"text","value":" that transaction and hence you must do it."}]},{"type":"element","tag":"h3","props":{"id":"using-create-method"},"children":[{"type":"element","tag":"a","props":{"href":"#using-create-method","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"create"}]},{"type":"text","value":" method"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"There is also a shorthand to persist relationships, without creating an instance of the related model."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token string\">'virk@adonisjs.com'</span>\nuser<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token string\">'secret'</span>\n\n<span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">related</span><span class=\"token punctuation\">(</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  avatarUrl<span class=\"token operator\">:</span> <span class=\"token string\">'foo.jpg'</span><span class=\"token punctuation\">,</span>\n  isActive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the above example, we have replaced the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"save"}]},{"type":"text","value":" method with the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"create"}]},{"type":"text","value":" method. Also, instead of passing an instance of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"profile"}]},{"type":"text","value":" model, you can pass a plain object to the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"create"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"h2","props":{"id":"avoid-duplicates-during-persistance"},"children":[{"type":"element","tag":"a","props":{"href":"#avoid-duplicates-during-persistance","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Avoid duplicates during persistance"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Since, Lucid makes use of actions for persisting relationships. You can use methods like "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"firstOrCreate"}]},{"type":"text","value":", "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"updateOrCreate"}]},{"type":"text","value":" and so on, to avoid creating duplicate rows."}]},{"type":"element","tag":"h3","props":{"id":"firstorcreate"},"children":[{"type":"element","tag":"a","props":{"href":"#firstorcreate","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"firstOrCreate"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Search for record inside the database and create a new one, when the lookup fails. This method is a perfect choice for persisting "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"hasOne"}]},{"type":"text","value":" relationships."}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The method behaves similar to the model's "},{"type":"element","tag":"a","props":{"href":"/guides/models/crud-operations#find-or-create"},"children":[{"type":"text","value":"firstOrCreate"}]},{"type":"text","value":" method."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the following example, the profile will only be created, if it doesn't already exists."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token string\">'virk@adonisjs.com'</span>\nuser<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token string\">'secret'</span>\n\n<span class=\"token keyword\">const</span> searchPayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> savePayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  avatarUrl<span class=\"token operator\">:</span> <span class=\"token string\">'foo.jpg'</span><span class=\"token punctuation\">,</span>\n  isActive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">related</span><span class=\"token punctuation\">(</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">firstOrCreate</span><span class=\"token punctuation\">(</span>searchPayload<span class=\"token punctuation\">,</span> savePayload<span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"updateorcreate"},"children":[{"type":"element","tag":"a","props":{"href":"#updateorcreate","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"updateOrCreate"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Similar to the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"firstOrCreate"}]},{"type":"text","value":", this method also updates the existing row, instead of fetching it."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nuser<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token string\">'virk@adonisjs.com'</span>\nuser<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token string\">'secret'</span>\n\n<span class=\"token keyword\">const</span> searchPayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> savePayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  avatarUrl<span class=\"token operator\">:</span> <span class=\"token string\">'foo.jpg'</span><span class=\"token punctuation\">,</span>\n  isActive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">related</span><span class=\"token punctuation\">(</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateOrCreate</span><span class=\"token punctuation\">(</span>searchPayload<span class=\"token punctuation\">,</span> savePayload<span class=\"token punctuation\">)</span>\n"}]}]}]}]}
