{"type":"root","children":[{"type":"element","tag":"dimertitle","props":{},"children":[{"type":"text","value":"Transactions"}]},{"type":"element","tag":"h1","props":{"id":"transactions"},"children":[{"type":"element","tag":"a","props":{"href":"#transactions","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Transactions"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Being a SQL ORM, Lucid has first class support for Transactions and save points. By the end of this guide, you will know:"}]},{"type":"element","tag":"div","props":{"className":["toc-container"]},"children":[{"type":"element","tag":"h2","props":{},"children":[{"type":"text","value":"Table of contents"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#working-with-transactions"},"children":[{"type":"text","value":"Working with Transactions"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#points-to-note"},"children":[{"type":"text","value":"Points to Note"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#managed-transactions"},"children":[{"type":"text","value":"Managed Transactions"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#passing-transaction-as-a-reference"},"children":[{"type":"text","value":"Passing Transaction as a Reference"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#save-points"},"children":[{"type":"text","value":"Save points"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#using-transactions-with-lucid-models"},"children":[{"type":"text","value":"Using Transactions with Lucid Models"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#model-query-builder"},"children":[{"type":"text","value":"Model Query Builder"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#persisting-relationships-inside-a-transaction"},"children":[{"type":"text","value":"Persisting Relationships Inside a Transaction"}]}]}]}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How to create and manage transactions"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How to create nested transactions (aka save points)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Using transactions with Lucid models"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Persisting relationships inside a transaction"}]}]},{"type":"element","tag":"h2","props":{"id":"working-with-transactions"},"children":[{"type":"element","tag":"a","props":{"href":"#working-with-transactions","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Working with Transactions"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Creating a new transaction is as simple as executing the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"database.transaction"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n<span class=\"token keyword\">const</span> trx <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// notice it is an async method</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Once you have received the transaction instance, you can use it to execute queries."}]},{"type":"element","tag":"div","props":{"className":["tabs"]},"children":[{"type":"element","tag":"div","props":{"className":["tab-head"]},"children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{"dataTitle":"tab-1"},"children":[{"type":"text","value":"Insert"}]},{"type":"element","tag":"li","props":{"dataTitle":"tab-2"},"children":[{"type":"text","value":"Select"}]}]}]},{"type":"element","tag":"div","props":{"className":["tab-body"]},"children":[{"type":"element","tag":"div","props":{"className":["tab-item"],"id":"tab-1"},"children":[{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"Insert"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">await</span> trx\n  <span class=\"token punctuation\">.</span><span class=\"token function\">insertQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'virk'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]}]},{"type":"element","tag":"div","props":{"className":["tab-item"],"id":"tab-2"},"children":[{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"Select"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">await</span> trx\n  <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n"}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Finally, make sure to "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"commit"}]},{"type":"text","value":" or "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"rollback"}]},{"type":"text","value":" the transaction. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> trx <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> trx\n    <span class=\"token punctuation\">.</span><span class=\"token function\">insertQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'virk'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">await</span> trx<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> trx<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Voila! You have just created and used a transaction."}]},{"type":"element","tag":"h3","props":{"id":"points-to-note"},"children":[{"type":"element","tag":"a","props":{"href":"#points-to-note","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Points to Note"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Just like the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Database"}]},{"type":"text","value":" object, you can also use the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"trx"}]},{"type":"text","value":" object to create new instances of the query builder."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"trx.commit"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"trx.rollback"}]},{"type":"text","value":" methods are async, so do make sure to put "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"await"}]},{"type":"text","value":" in front of them."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Lucid reserves a dedicated connection as soon as "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Database.transaction()"}]},{"type":"text","value":" method is called and releases the connection after commit or rollback actions."}]}]},{"type":"element","tag":"h2","props":{"id":"managed-transactions"},"children":[{"type":"element","tag":"a","props":{"href":"#managed-transactions","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Managed Transactions"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The above example expects you to manually "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"commit"}]},{"type":"text","value":" or "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"rollback"}]},{"type":"text","value":" transactions by wrapping your code inside a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"try/catch"}]},{"type":"text","value":" block. A managed transaction does this automatically for you. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>trx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> trx\n    <span class=\"token punctuation\">.</span><span class=\"token function\">insertQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'virk'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Passing a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"callback"}]},{"type":"text","value":" to the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Database.transaction"}]},{"type":"text","value":" method starts a managed transaction."}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The transaction auto commits after executing the callback."}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If callback raises an exception, the transaction will be rolled back automatically and re-throws the exception."}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also return a value from the callback and then access it at the top level scope. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> userId <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>trx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> trx\n    <span class=\"token punctuation\">.</span><span class=\"token function\">insertQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'virk'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 👈 return value</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"passing-transaction-as-a-reference"},"children":[{"type":"element","tag":"a","props":{"href":"#passing-transaction-as-a-reference","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Passing Transaction as a Reference"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The transactions API is not only limited to creating a query builder instance from a transaction object. You can also pass it around to existing query builder instances or models."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n<span class=\"token keyword\">const</span> trx <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nDatabase\n  <span class=\"token punctuation\">.</span><span class=\"token function\">insertQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> client<span class=\"token operator\">:</span> trx <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> 👈\n  <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'virk'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Or pass it at a later stage using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"useTransaction"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n<span class=\"token keyword\">const</span> trx <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nDatabase\n  <span class=\"token punctuation\">.</span><span class=\"token function\">insertQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">useTransaction</span><span class=\"token punctuation\">(</span>trx<span class=\"token punctuation\">)</span> 👈\n  <span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'virk'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"save-points"},"children":[{"type":"element","tag":"a","props":{"href":"#save-points","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Save points"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Every time you create a nested transaction, Lucid behinds the scenes creates a new "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Savepoint"},"children":[{"type":"text","value":"savepoint"}]},{"type":"text","value":". Since transactions needs a dedicated connection, using savepoints reduces the number of required connections."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n\n<span class=\"token comment\">// Transaction is created</span>\n<span class=\"token keyword\">const</span> trx <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// This time a save point is created</span>\n<span class=\"token keyword\">const</span> savepoint <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> trx<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n <span class=\"token comment\">// also rollbacks the savepoint</span>\n<span class=\"token keyword\">await</span> trx<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"using-transactions-with-lucid-models"},"children":[{"type":"element","tag":"a","props":{"href":"#using-transactions-with-lucid-models","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Using Transactions with Lucid Models"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also make use of transactions when persisting or fetching rows using a Lucid model. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/User'</span>\n<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n\n<span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>trx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  user<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> <span class=\"token string\">'virk'</span>\n\n<span class=\"dimer-highlight-code-line\">  user<span class=\"token punctuation\">.</span><span class=\"token function\">useTransaction</span><span class=\"token punctuation\">(</span>trx<span class=\"token punctuation\">)</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As soon as the transaction is completed, the Model will release the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"trx"}]},{"type":"text","value":" reference."}]},{"type":"element","tag":"h3","props":{"id":"model-query-builder"},"children":[{"type":"element","tag":"a","props":{"href":"#model-query-builder","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Model Query Builder"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Just like the standard query builder, you can also pass the transaction to the model query builder."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/User'</span>\n\n<span class=\"token keyword\">const</span> trx <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User\n  <span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> client<span class=\"token operator\">:</span> trx <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> 👈\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'is_active'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"persisting-relationships-inside-a-transaction"},"children":[{"type":"element","tag":"a","props":{"href":"#persisting-relationships-inside-a-transaction","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Persisting Relationships Inside a Transaction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The most common use case for transactions is to persist relationships. Consider the following example of "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"creating a new user"}]},{"type":"text","value":" and "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"their profile"}]},{"type":"text","value":" by wrapping them inside a single transaction."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/User'</span>\n\n<span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>trx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  user<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> <span class=\"token string\">'virk'</span>\n\n  user<span class=\"token punctuation\">.</span><span class=\"token function\">useTransaction</span><span class=\"token punctuation\">(</span>trx<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"dimer-highlight-code-line\">  <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">related</span><span class=\"token punctuation\">(</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">    fullName<span class=\"token operator\">:</span> <span class=\"token string\">'Harminder Virk'</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">    avatar<span class=\"token operator\">:</span> <span class=\"token string\">'some-url.jpg'</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the above query, the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"related('profile').create"}]},{"type":"text","value":" method will automatically use the transaction object assigned to the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"User"}]},{"type":"text","value":" model."}]}]}
