{"type":"root","children":[{"type":"element","tag":"dimertitle","props":{},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"h1","props":{"id":"introduction"},"children":[{"type":"element","tag":"a","props":{"href":"#introduction","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"AdonisJS is one of the few Node.js frameworks (if not the only one) that has first class support for SQL databases. The Database layer of the framework "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"(Lucid)"}]},{"type":"text","value":" comes with versatile set of tools, enabling you to build data driven applications quickly and easily."}]},{"type":"element","tag":"div","props":{"className":["toc-container"]},"children":[{"type":"element","tag":"h2","props":{},"children":[{"type":"text","value":"Table of contents"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#database-query-builder"},"children":[{"type":"text","value":"Database query builder"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#data-models"},"children":[{"type":"text","value":"Data Models"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#say-hello-to-data-models"},"children":[{"type":"text","value":"Say Hello to Data Models"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#what-just-happened"},"children":[{"type":"text","value":"What just happened?"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#schema-migrations"},"children":[{"type":"text","value":"Schema migrations"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#seeds--factories"},"children":[{"type":"text","value":"Seeds & Factories"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this guide, we will briefly talk about the following topics. Once you have the basic understanding, you can dig into the in-depth guides of individual topics."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Database query builder"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Data Models"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Schema migrations"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Seeds & Factories"}]}]},{"type":"element","tag":"h2","props":{"id":"database-query-builder"},"children":[{"type":"element","tag":"a","props":{"href":"#database-query-builder","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Database query builder"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The database query builder offers a rich API for constructing SQL queries, ranging from simple "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"select all"}]},{"type":"text","value":" to "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"complex joins"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"No need to write the SQL DSL by hand. Just use our Javascript API and we will create the correct SQL query for the database engine in use. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// SQL:  SELECT * FROM \"users\";</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Similarly you can construct complex queries with where clause and joins."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'virk'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">innerJoin</span><span class=\"token punctuation\">(</span><span class=\"token string\">'profiles'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'users.id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'profiles.user_id'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// SQL: SELECT * FROM `users` inner join `profiles` on `users`.`id` = `profiles`.`user_id` where `username` = ? limit ?</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The goal of the query builder is to offer you a declarative API to construct SQL queries, without preventing you from using the power of SQL. Everything that you can write in raw SQL is also supported by the "},{"type":"element","tag":"a","props":{"href":"/guides/database/query-builder"},"children":[{"type":"text","value":"query builder"}]},{"type":"text","value":" or the "},{"type":"element","tag":"a","props":{"href":"/guides/database/query-builder#executing-raw-queries"},"children":[{"type":"text","value":"raw query builder"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"data-models"},"children":[{"type":"element","tag":"a","props":{"href":"#data-models","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Data Models"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The database query builder does a great job by letting your write SQL queries using the JavaScript API. However, the result of every query is an array of plain JavaScript objects with no behavior."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Imagine, you fetch an array of users and each user object has a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"date_of_birth"}]},{"type":"text","value":" property. Before returning the data back to the client, you want to compute the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"age"}]},{"type":"text","value":" of the user. How would you do it?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Well, you will have to loop over the array."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Subtract the users "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"date_of_birth"}]},{"type":"text","value":" from the current date."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Attach a new property to the existing object."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Delete the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"date_of_birth"}]},{"type":"text","value":" property."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Send response."}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DateTime <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'luxon'</span>\n<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">return</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> dob <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span><span class=\"token function\">fromJSDate</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>date_of_birth<span class=\"token punctuation\">)</span>\n  user<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span><span class=\"token function\">local</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>dob<span class=\"token punctuation\">,</span> <span class=\"token string\">'years'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>years\n\n  <span class=\"token keyword\">delete</span> user<span class=\"token punctuation\">.</span>date_of_birth\n  <span class=\"token keyword\">return</span> user\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The above code example is not bad by any means. But imagine writing these transformations everywhere inside you codebase. Well, we can do better this by using data models."}]},{"type":"element","tag":"h3","props":{"id":"say-hello-to-data-models"},"children":[{"type":"element","tag":"a","props":{"href":"#say-hello-to-data-models","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Say Hello to Data Models"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Data models are defined as JavaScript classes and each class is meant to query a single database table. Instead of using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Database"}]},{"type":"text","value":" object for executing queries, you will make use of the model to create and run SQL queries. For example:"}]},{"type":"element","tag":"div","props":{"className":["tabs"]},"children":[{"type":"element","tag":"div","props":{"className":["tab-head"]},"children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{"dataTitle":"tab-1"},"children":[{"type":"text","value":"Defining Model"}]},{"type":"element","tag":"li","props":{"dataTitle":"tab-2"},"children":[{"type":"text","value":"Using Model"}]}]}]},{"type":"element","tag":"div","props":{"className":["tab-body"]},"children":[{"type":"element","tag":"div","props":{"className":["tab-item"],"id":"tab-1"},"children":[{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"Defining Model"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DateTime <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'luxon'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> column<span class=\"token punctuation\">,</span> BaseModel <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Orm'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseModel</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">column</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isPrimary<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n\n  @<span class=\"token function\">column</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\n  @column<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> dateOfBirth<span class=\"token operator\">:</span> DateTime\n<span class=\"token punctuation\">}</span>\n"}]}]}]}]},{"type":"element","tag":"div","props":{"className":["tab-item"],"id":"tab-2"},"children":[{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"Using Model"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/User'</span>\n\n<span class=\"token comment\">// select all</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// using query builder</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'virk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n"}]}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"One of the major differences between "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Database query builder"}]},{"type":"text","value":" and "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Models"}]},{"type":"text","value":" is that models returns an array of "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"class instances over plain objects"}]},{"type":"text","value":". This simple distinction makes models way more powerful over the standard query builder."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Coming back to the earlier example of computing user "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"age"}]},{"type":"text","value":" from the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"date_of_birth"}]},{"type":"text","value":". Following is an example of achieving the same result without performing inline transformations inside a loop."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"],"dataLine":"11,14-17"},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DateTime <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'luxon'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> column<span class=\"token punctuation\">,</span> computed<span class=\"token punctuation\">,</span> BaseModel <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Orm'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseModel</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">column</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isPrimary<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n\n  @<span class=\"token function\">column</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\n<span class=\"dimer-highlight-code-line\">  @column<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> serializeAs<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>  <span class=\"token keyword\">public</span> dateOfBirth<span class=\"token operator\">:</span> DateTime\n\n<span class=\"dimer-highlight-code-line\">  @<span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token keyword\">public</span> <span class=\"token keyword\">get</span> <span class=\"token function\">age</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">    <span class=\"token keyword\">return</span> DateTime<span class=\"token punctuation\">.</span><span class=\"token function\">local</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dateOfBirth<span class=\"token punctuation\">,</span> <span class=\"token string\">'years'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>years</span><span class=\"dimer-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> User <span class=\"token keyword\">from</span> <span class=\"token string\">'App/Models/User'</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/**\n * The computed property \"age\" will be added to the\n * user object during `user.toJSON` call.\n */</span>\n<span class=\"token keyword\">return</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"what-just-happened"},"children":[{"type":"element","tag":"a","props":{"href":"#what-just-happened","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"What just happened?"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"We begin by defining "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"serializeAs = null"}]},{"type":"text","value":" property on the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"dateOfBirth"}]},{"type":"text","value":" column. This will fetch the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"date_of_birth"}]},{"type":"text","value":" from the table "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"(since we need it for calculation)"}]},{"type":"text","value":", but will remove it during serialization."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Next, we define a computed property "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"age"}]},{"type":"text","value":" on the model. Computed properties are values that are created on the fly, but doesn't exists in the database."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"toJSON"}]},{"type":"text","value":" method serializes a model instance to a plain Javascript object and this is where all the magic happens."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As you can see, models makes it possible to attach behavior to the rows fetched from the database and this alone will help you cleanup a lot of inline data transformations."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"There is a lot more to uncover with Data models. We recommend you to read the "},{"type":"element","tag":"a","props":{"href":"/guides/models/introduction"},"children":[{"type":"text","value":"dedicated guide"}]},{"type":"text","value":" for better in-depth understanding."}]},{"type":"element","tag":"h2","props":{"id":"schema-migrations"},"children":[{"type":"element","tag":"a","props":{"href":"#schema-migrations","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Schema migrations"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Schema migrations enables you to programmatically "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"create/alter database tables"}]},{"type":"text","value":". At first, schema migrations may feel trivial, as one can login to a GUI application like Sequel Pro and can manually create tables."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"However, the manual process has its own set of shortcomings like."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Production database must be exposed publicly for a GUI application to connect."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Schema changes are not tied to deployment workflows and manual intervention is always required."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"There is no history around the evolution of the database."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The schema migrations addresses all of the above issues by offering a robust layer for managing database changes as code. Make sure to read the "},{"type":"element","tag":"a","props":{"href":"/guides/database/migrations"},"children":[{"type":"text","value":"schema migrations"}]},{"type":"text","value":" guide for better understanding."}]},{"type":"element","tag":"h2","props":{"id":"seeds--factories"},"children":[{"type":"element","tag":"a","props":{"href":"#seeds--factories","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Seeds & Factories"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Every application under development needs dummy data at some stage. It can be during tests, or when sharing your code with a colleague."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"One option is to manually insert data using a GUI application, but a better approach is to automate this process and this is where "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"seeds"}]},{"type":"text","value":" and "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"factories"}]},{"type":"text","value":" comes into the picture."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Seeders allows you insert data to your database by running a single "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"db:seed"}]},{"type":"text","value":" command."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Based upon the amount of data you want to seed, manually typing values for each row can be tedious. Factories helps you with generating fake data on the fly."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Combining seeders and factories together, you end up with a very robust system seeding database without manual intervention."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We recommend reading the dedicated guide on "},{"type":"element","tag":"a","props":{"href":"/guides/database/seeds"},"children":[{"type":"text","value":"seeds and factories"}]},{"type":"text","value":" for in-depth understanding."}]}]}
