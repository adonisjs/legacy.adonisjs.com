{"type":"root","children":[{"type":"element","tag":"dimertitle","props":{},"children":[{"type":"text","value":"Query Builder"}]},{"type":"element","tag":"h1","props":{"id":"query-builder"},"children":[{"type":"element","tag":"a","props":{"href":"#query-builder","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Query Builder"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The Database query builder is the first step towards constructing and executing SQL queries. Instead of writing SQL DSL by hand, you make use of the Javascript API for constructing queries."}]},{"type":"element","tag":"div","props":{"className":["toc-container"]},"children":[{"type":"element","tag":"h2","props":{},"children":[{"type":"text","value":"Table of contents"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#using-the-query-builder"},"children":[{"type":"text","value":"Using the Query Builder"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#types-of-query-builders"},"children":[{"type":"text","value":"Types of Query Builders"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#fetching-rows"},"children":[{"type":"text","value":"Fetching Rows"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#inserting-rows"},"children":[{"type":"text","value":"Inserting Rows"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#multi-insert"},"children":[{"type":"text","value":"Multi Insert"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#updating-and-deleting-rows"},"children":[{"type":"text","value":"Updating and Deleting Rows"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#executing-raw-queries"},"children":[{"type":"text","value":"Executing Raw Queries"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#aggregates"},"children":[{"type":"text","value":"Aggregates"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#whats-next"},"children":[{"type":"text","value":"What's Next?"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"By the end of this guide, you will know:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How to construct and execute SQL queries"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Using different types of query builders for executing insert, select or raw queries"}]}]},{"type":"element","tag":"h2","props":{"id":"using-the-query-builder"},"children":[{"type":"element","tag":"a","props":{"href":"#using-the-query-builder","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Using the Query Builder"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can get an instance of the query builder using the Database module. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Database.query"}]},{"type":"text","value":" method creates a new query builder instance."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"select"}]},{"type":"text","value":" method is used to select the columns."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Finally the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"from"}]},{"type":"text","value":" method specifies the database table for the query."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The result of the query is always an array of objects, unless the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":".first"}]},{"type":"text","value":" method is used."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Just like the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"select"}]},{"type":"text","value":" and the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"from"}]},{"type":"text","value":" methods, there are many more methods on the query builder to construct advanced and complex SQL queries."}]},{"type":"element","tag":"h2","props":{"id":"types-of-query-builders"},"children":[{"type":"element","tag":"a","props":{"href":"#types-of-query-builders","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Types of Query Builders"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Database.query"}]},{"type":"text","value":" method creates a query builder instance for "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"selecting"}]},{"type":"text","value":", "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"updating"}]},{"type":"text","value":" or "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"deleting"}]},{"type":"text","value":" rows. Whereas, to insert new data, you have to make use of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"insert query builder"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Following is the list different query builders instances."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Query builder for selecting, updating or deleting rows."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Database<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Shortcut</span>\nDatabase<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Query builder for inserting new rows."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Database<span class=\"token punctuation\">.</span><span class=\"token function\">insertQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Shortcut</span>\nDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Raw query builder for executing raw SQL queries. You will learn about raw queries later in this guide."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Database<span class=\"token punctuation\">.</span><span class=\"token function\">rawQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'select * from users;'</span><span class=\"token punctuation\">)</span>\n"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"fetching-rows"},"children":[{"type":"element","tag":"a","props":{"href":"#fetching-rows","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Fetching Rows"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Fetching rows is as sample as executing a select query using the Database query builder. The result of a query is always an array of objects, even when a single row is returned from the database."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// an array of users</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you always want a single row from the result set, then you can make use of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"first"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"first"}]},{"type":"text","value":" method applies a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"LIMIT"}]},{"type":"text","value":" clause to the query."}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"inserting-rows"},"children":[{"type":"element","tag":"a","props":{"href":"#inserting-rows","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Inserting Rows"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You make use of the insert query builder for inserting new rows to the database. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">await</span> Database\n  <span class=\"token punctuation\">.</span><span class=\"token function\">insertQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 👈 gives an instance of insert query builder</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'virk'</span><span class=\"token punctuation\">,</span> email<span class=\"token operator\">:</span> <span class=\"token string\">'virk@adonisjs.com'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The return value of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"insert"}]},{"type":"text","value":" query is dependent on the database server in use."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"MySQL and SQLite will return the last inserted row id as an array with just one item. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> lastInsertId <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For PostgreSQL, MSSQL and Oracle, you can make use of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"returning"}]},{"type":"text","value":" method. The returning method can return value for a single column or multiple columns. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> id <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database\n  <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">returning</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span> 👈\n  <span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// multiple columns</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database\n  <span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">returning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> 👈\n  <span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]}]}]},{"type":"element","tag":"h3","props":{"id":"multi-insert"},"children":[{"type":"element","tag":"a","props":{"href":"#multi-insert","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Multi Insert"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can make use of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"multiInsert"}]},{"type":"text","value":" method in order to insert multiple rows in a single insert query."}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"MySQL and SQLite only returns the id for the last row and not all the rows."}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiInsert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'virk'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'romain'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"updating-and-deleting-rows"},"children":[{"type":"element","tag":"a","props":{"href":"#updating-and-deleting-rows","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Updating and Deleting Rows"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can update and delete rows by using the standard query builder. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">await</span> Database\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'virk'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> account_status<span class=\"token operator\">:</span> <span class=\"token string\">'verified'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Or delete"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">await</span> Database\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'posts'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slug'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dummy-post'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"executing-raw-queries"},"children":[{"type":"element","tag":"a","props":{"href":"#executing-raw-queries","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Executing Raw Queries"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Raw queries allows to execute a SQL statement from a string input. This is usually helpful, when you want to execute complex queries that are not supported by the standard query builder."}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Unlike the standard query builder response, the response of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"rawQuery"}]},{"type":"text","value":" is not normalized. You must read the documentation of the underlying npm driver for same."}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Database <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Database'</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Database\n  <span class=\"token punctuation\">.</span><span class=\"token function\">rawQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'select * from users where id = ?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"rawQuery"}]},{"type":"text","value":" method accepts a total of two arguments."}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"First argument is the SQL query."}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"2nd argument is an array of values to substitute the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" placeholders inside the SQL string. To prevent SQL injection, you must always define values as bindings and do not inline them inside the SQL string. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"Prone to SQL injection"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Database<span class=\"token punctuation\">.</span><span class=\"token function\">rawQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'select * from users where id = 1'</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"Safe from SQL injection"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Database<span class=\"token punctuation\">.</span><span class=\"token function\">rawQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'select * from users where id = ?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n"}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"aggregates"},"children":[{"type":"element","tag":"a","props":{"href":"#aggregates","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Aggregates"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The aggregate methods like "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"count"}]},{"type":"text","value":", "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"min"}]},{"type":"text","value":", "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"avg"}]},{"type":"text","value":" returns an array with the aggregate key and its value. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">const</span> total <span class=\"token operator\">=</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// SQLITE: [{ \"count(*)\": 4 }]</span>\n<span class=\"token comment\">// POSTGRESQL: [{ \"count\": \"4\" }]</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As you can notice, the output of "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"PostgreSQL"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"SQLite"}]},{"type":"text","value":" is different and hence not predictable. To encounter this behavior, it is recommended to always alias your aggregates."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">await</span> Database<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token string\">'* as total'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'users'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// SQLITE: [{ \"total\": 4 }]</span>\n<span class=\"token comment\">// POSTGRESQL: [{ \"total\": \"4\" }]</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"whats-next"},"children":[{"type":"element","tag":"a","props":{"href":"#whats-next","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"What's Next?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This guide introduces you to the concept of Query builder and how to use it inside your application. However, the API surface of the query builder is quite big and we recommend you reading the "},{"type":"element","tag":"a","props":{"href":"/api/database/query-builder"},"children":[{"type":"text","value":"API docs"}]},{"type":"text","value":" for same."}]}]}
