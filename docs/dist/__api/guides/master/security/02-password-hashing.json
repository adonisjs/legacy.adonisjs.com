{"type":"root","children":[{"type":"element","tag":"dimertitle","props":{},"children":[{"type":"text","value":"Password Hashing"}]},{"type":"element","tag":"h1","props":{"id":"password-hashing"},"children":[{"type":"element","tag":"a","props":{"href":"#password-hashing","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Password Hashing"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"AdonisJS uses the industry standard algorithms "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"bcrypt"}]},{"type":"text","value":" and "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"argon2"}]},{"type":"text","value":" to hash user passwords. Hashing is not same as encryption, since the hashed value cannot be converted back to original value and hence highly recommended for storing passwords."}]},{"type":"element","tag":"div","props":{"className":["toc-container"]},"children":[{"type":"element","tag":"h2","props":{},"children":[{"type":"text","value":"Table of contents"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#available-drivers"},"children":[{"type":"text","value":"Available drivers"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#hashing-values"},"children":[{"type":"text","value":"Hashing values"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#verify-against-the-existing-hash"},"children":[{"type":"text","value":"Verify against the existing hash"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#switching-drivers"},"children":[{"type":"text","value":"Switching drivers"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#hash-user-password"},"children":[{"type":"text","value":"Hash user password"}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"available-drivers"},"children":[{"type":"element","tag":"a","props":{"href":"#available-drivers","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Available drivers"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"AdonisJS out of the box comes with the support for "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"bcrypt"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"argon2"}]},{"type":"text","value":". However, you must install their respective drivers for npm."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Run "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"npm i @phc/bcrypt"}]},{"type":"text","value":" for bcrypt."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"And "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"npm i @phc/argon2"}]},{"type":"text","value":" for argon2."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The configuration for the hash module is stored inside the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"config/hash.ts"}]},{"type":"text","value":" file. Feel free to tweak it as per your requirements."}]},{"type":"element","tag":"h2","props":{"id":"hashing-values"},"children":[{"type":"element","tag":"a","props":{"href":"#hashing-values","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Hashing values"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Following is an example of creating a hash of a value."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Hash <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/Hash'</span>\n<span class=\"token keyword\">const</span> hashedValue <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Hash<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'secure-user-password'</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"verify-against-the-existing-hash"},"children":[{"type":"element","tag":"a","props":{"href":"#verify-against-the-existing-hash","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Verify against the existing hash"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As stated earlier, you cannot convert the hash back to its original value. However, you can verify the plain value against the existing hash."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Hash <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/Hash'</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> Hash<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>existingHash<span class=\"token punctuation\">,</span> <span class=\"token string\">'secure-user-password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// is valid</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"switching-drivers"},"children":[{"type":"element","tag":"a","props":{"href":"#switching-drivers","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Switching drivers"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can switch between drivers using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"use"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Hash <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/Hash'</span>\n\nHash<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'argon2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nHash<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bcrypt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"hash-user-password"},"children":[{"type":"element","tag":"a","props":{"href":"#hash-user-password","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Hash user password"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In order to hash the user password, you can make use of the Lucid models hooks and hash it before creating the user record or before updating their password."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Following is an example of the model hook"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> Hash <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/Hash'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> column<span class=\"token punctuation\">,</span> beforeSave<span class=\"token punctuation\">,</span> BaseModel <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Lucid/Orm'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseModel</span> <span class=\"token punctuation\">{</span>\n  @<span class=\"token function\">beforeSave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token function\">hashPassword</span> <span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>$dirty<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      user<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Hash<span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]}]}
