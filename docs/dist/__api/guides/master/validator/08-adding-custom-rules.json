{"type":"root","children":[{"type":"element","tag":"dimertitle","props":{},"children":[{"type":"text","value":"Custom Rules"}]},{"type":"element","tag":"h1","props":{"id":"custom-rules"},"children":[{"type":"element","tag":"a","props":{"href":"#custom-rules","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Custom Rules"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The validator is extensible and allows adding custom rules. In this guide, we will go through the validator API and add a couple of custom rules to understand the different moving parts."}]},{"type":"element","tag":"div","props":{"className":["toc-container"]},"children":[{"type":"element","tag":"h2","props":{},"children":[{"type":"text","value":"Table of contents"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#validating-phone-numbers"},"children":[{"type":"text","value":"Validating phone numbers"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#updating-interface-for-static-analysis-to-work"},"children":[{"type":"text","value":"Updating interface for static analysis to work"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#usage"},"children":[{"type":"text","value":"Usage"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#accepting-options"},"children":[{"type":"text","value":"Accepting options"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#updating-implementation-to-handle-options"},"children":[{"type":"text","value":"Updating implementation to handle options"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#mutating-values"},"children":[{"type":"text","value":"Mutating values"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#normalizing-the-phone-number"},"children":[{"type":"text","value":"Normalizing the phone number"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#reporting-errors"},"children":[{"type":"text","value":"Reporting errors"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#pointer"},"children":[{"type":"text","value":"pointer"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#rulename"},"children":[{"type":"text","value":"ruleName"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#defaultmessage"},"children":[{"type":"text","value":"defaultMessage"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#arraypointer"},"children":[{"type":"text","value":"arrayPointer"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#metadata"},"children":[{"type":"text","value":"metaData"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#referencing-other-fields-values"},"children":[{"type":"text","value":"Referencing other field's values"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#what-is-root-and-tip"},"children":[{"type":"text","value":"What is root and tip?"}]}]}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"validating-phone-numbers"},"children":[{"type":"element","tag":"a","props":{"href":"#validating-phone-numbers","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Validating phone numbers"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lets add a custom rule to validate phone numbers using "},{"type":"element","tag":"a","props":{"href":"https://github.com/catamphetamine/libphonenumber-js"},"children":[{"type":"text","value":"libphonenumber-js"}]},{"type":"text","value":". The validator already ships with a mobile number validation rule, but the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"libphonenumber-js"}]},{"type":"text","value":" is more robust."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lets begin by creating a new "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"preload file"}]},{"type":"text","value":" using the following ace command. Make sure to select "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"During HTTP server"}]},{"type":"text","value":", since we do not want to load the rules while running an ace command."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-sh","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"node ace make:prldfile validationRules\n\n<span class=\"token comment\"># âœ”  create    start/validationRules.ts</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"src":"https://res.cloudinary.com/adonis-js/image/upload/q_auto,w_700,f_auto,fl_lossy/v1592037324/adonisjs.com/prldfile-validator-rules.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Open the newly created file and paste the following code snippet inside it."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"start/validationRules.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> validator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/Validator'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> parsePhoneNumberFromString <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'libphonenumber-js'</span>\n\nvalidator<span class=\"token punctuation\">.</span><span class=\"token function\">rule</span><span class=\"token punctuation\">(</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> pointer<span class=\"token punctuation\">,</span> arrayExpressionPointer<span class=\"token punctuation\">,</span> errorReporter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * Skip validation when value is not a string. The string\n   * schema rule will handle it\n   */</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Parse phone number from a string\n   */</span>\n  <span class=\"token keyword\">const</span> phoneNumber <span class=\"token operator\">=</span> <span class=\"token function\">parsePhoneNumberFromString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token string\">'IN'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">/**\n   * Report error when phone number is not valid\n   */</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>phoneNumber <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>phoneNumber<span class=\"token punctuation\">.</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    errorReporter<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span>pointer<span class=\"token punctuation\">,</span> <span class=\"token string\">'phone'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Invalid phone'</span><span class=\"token punctuation\">,</span> arrayExpressionPointer<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"We skip the validation when field value is not a string."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"We parse the field value using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"parsePhoneNumberFromString"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"If the value is null or is invalid, then we will report the validation error using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"errorReporter.report"}]},{"type":"text","value":" method."}]}]},{"type":"element","tag":"h3","props":{"id":"updating-interface-for-static-analysis-to-work"},"children":[{"type":"element","tag":"a","props":{"href":"#updating-interface-for-static-analysis-to-work","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Updating interface for static analysis to work"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Next, you also need to update the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Rules"}]},{"type":"text","value":" interface for typescript to recognize the rule at compile time."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a new file "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"contracts/validator.ts"}]},{"type":"text","value":" file and paste the following code snippet inside it."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"contracts/validator.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'@ioc:Adonis/Core/Validator'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Rule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/Validator'</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Rules</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">phone</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Rule <span class=\"token comment\">// ðŸ‘ˆ </span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"usage"},"children":[{"type":"element","tag":"a","props":{"href":"#usage","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Usage"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Alright, now you can use the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"phone"}]},{"type":"text","value":" validation rule inside your validators. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"schema<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  phone<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    rules<span class=\"token punctuation\">.</span><span class=\"token function\">phone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"accepting-options"},"children":[{"type":"element","tag":"a","props":{"href":"#accepting-options","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Accepting options"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Right now the country code is hardcoded inside the validation method. Let's take a step ahead and make it configurable by accepting it as an option."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This time, we will approach the change from our interface. Re-open "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"contracts/validator.ts"}]},{"type":"text","value":" file and update the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"phone"}]},{"type":"text","value":" method."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"contracts/validator.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CountryCode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'libphonenumber-js'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Rules</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">phone</span> <span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> countryCode<span class=\"token operator\">:</span> CountryCode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Rule\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"We accept a required options object with only one property "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"countryCode"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"By using an object, we allow ourselves to accept more configuration options in the future."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Next, update the schema usage and pass the country code explicitly."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"schema<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  phone<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    rules<span class=\"token punctuation\">.</span><span class=\"token function\">phone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> countryCode<span class=\"token operator\">:</span> <span class=\"token string\">'IN'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ðŸ‘ˆ</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"updating-implementation-to-handle-options"},"children":[{"type":"element","tag":"a","props":{"href":"#updating-implementation-to-handle-options","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Updating implementation to handle options"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Finally, we need to update our rule implementation to use the configured country code over the hardcoded one."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"start/validationRules.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"validator<span class=\"token punctuation\">.</span><span class=\"token function\">rule</span><span class=\"token punctuation\">(</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>\n  value<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> countryCode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// ðŸ‘ˆ here we get the options</span>\n  <span class=\"token punctuation\">{</span> pointer<span class=\"token punctuation\">,</span> arrayExpressionPointer<span class=\"token punctuation\">,</span> errorReporter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">const</span> phoneNumber <span class=\"token operator\">=</span> <span class=\"token function\">parsePhoneNumberFromString</span><span class=\"token punctuation\">(</span>\n    value<span class=\"token punctuation\">,</span>\n    countryCode<span class=\"token punctuation\">,</span> <span class=\"token comment\">// ðŸ‘ˆ here we use the country code</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The options accepted by a validation method are passed an array of multiple arguments to the rule implementation."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"In our case, we accept only one argument. i.e: An object with the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"countryCode"}]},{"type":"text","value":" property. So our implementation receives it as an array with just one item inside it."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Finally, we remove the hard coded "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"IN"}]},{"type":"text","value":" country code and use the one received as an option."}]}]},{"type":"element","tag":"h2","props":{"id":"mutating-values"},"children":[{"type":"element","tag":"a","props":{"href":"#mutating-values","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Mutating values"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The validator allows custom rules to also mutate the field value, since we believe that validation and normalization/sanitization always goes hand in hand."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The phone number rule is a great example of where you would like to perform normalization before storing it inside the database."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"One option is to separate the normalization and validation processes, which sounds great in theory, but can have huge impact on the performance of your app."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Let's imagine the phone number is a deeply nested property inside an array and then sub-objects."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"First, you will loop over all the items to validate the phone number."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"And then again run a loop to normalize its value."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To address this concern, we allow you to normalize and mutate the value during validation itself."}]},{"type":"element","tag":"h3","props":{"id":"normalizing-the-phone-number"},"children":[{"type":"element","tag":"a","props":{"href":"#normalizing-the-phone-number","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Normalizing the phone number"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lets update the rule implementation to normalize the phone number and then mutate its value."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"start/validationRules.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"validator<span class=\"token punctuation\">.</span><span class=\"token function\">rule</span><span class=\"token punctuation\">(</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>\n  value<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> countryCode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> pointer<span class=\"token punctuation\">,</span> arrayExpressionPointer<span class=\"token punctuation\">,</span> errorReporter<span class=\"token punctuation\">,</span> mutate <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * Skip validation when value is not a string. The string\n   * schema rule will handle it\n   */</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Parse phone number from a string\n   */</span>\n  <span class=\"token keyword\">const</span> phoneNumber <span class=\"token operator\">=</span> <span class=\"token function\">parsePhoneNumberFromString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> countryCode<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">/**\n   * Report error when phone number is not valid\n   */</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>phoneNumber <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>phoneNumber<span class=\"token punctuation\">.</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    errorReporter<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span>pointer<span class=\"token punctuation\">,</span> <span class=\"token string\">'phone'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Invalid phone'</span><span class=\"token punctuation\">,</span> arrayExpressionPointer<span class=\"token punctuation\">)</span>\n<span class=\"dimer-highlight-code-line\">    <span class=\"token keyword\">return</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"dimer-highlight-code-line\">&nbsp;</span><span class=\"dimer-highlight-code-line\">  <span class=\"token keyword\">const</span> normalized <span class=\"token operator\">=</span> phoneNumber<span class=\"token punctuation\">.</span><span class=\"token function\">formatNational</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span>normalized<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"We use the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"formatNation"}]},{"type":"text","value":" method to format the phone number."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Next, we make use of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"mutate"}]},{"type":"text","value":" method to set the new value."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Now, all validated phone numbers will always be formatted."}]}]},{"type":"element","tag":"h2","props":{"id":"reporting-errors"},"children":[{"type":"element","tag":"a","props":{"href":"#reporting-errors","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Reporting errors"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the earlier versions of the validator, we used to return "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" values from the validation functions to indicate the success or failure. However, the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"boolean"}]},{"type":"text","value":" are very restrictive in nature. For example:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You cannot report multiple errors."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You cannot pass custom metadata related to the validation failure."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You cannot report errors for sub validation failures. For example: The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"file"}]},{"type":"text","value":" validation rule reports separate errors for "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":".size"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":".extnames"}]},{"type":"text","value":" failures."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To address the above concern, we now pass the error reporter to the validation rules giving them the complete control."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Following is an example of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"report"}]},{"type":"text","value":" method arguments."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"errorReporter<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span>\n  pointer<span class=\"token punctuation\">,</span>\n  ruleName<span class=\"token punctuation\">,</span>\n  defaultMessage<span class=\"token punctuation\">,</span>\n  arrayPointer<span class=\"token punctuation\">,</span>\n  metaData<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"pointer"},"children":[{"type":"element","tag":"a","props":{"href":"#pointer","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"pointer"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"pointer"}]},{"type":"text","value":"is the complete path to the field under validation. If a field is inside a nested object, then the pointer will be complete path joined using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"dot"}]},{"type":"text","value":"."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-js","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    profile<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      username<span class=\"token operator\">:</span> <span class=\"token string\">'somename'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Pointer for "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"username"}]},{"type":"text","value":" will be "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"user.profile.username"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h3","props":{"id":"rulename"},"children":[{"type":"element","tag":"a","props":{"href":"#rulename","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"ruleName"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"ruleName"}]},{"type":"text","value":" is the rule for which the validation has failed. This value doesn't have to be strictly the rule name. For example: The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"file"}]},{"type":"text","value":" validation rule uses "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"file.size"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"file.extnames"}]},{"type":"text","value":" as the ruleName."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This allows custom messages to have more variations."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-json","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"file.size\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Must be less than 2MB\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"file.extnames\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Must be a png or jpg\"</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"defaultmessage"},"children":[{"type":"element","tag":"a","props":{"href":"#defaultmessage","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"defaultMessage"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The message to use, when no custom message is defined."}]},{"type":"element","tag":"h3","props":{"id":"arraypointer"},"children":[{"type":"element","tag":"a","props":{"href":"#arraypointer","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"arrayPointer"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The validator allows defining custom messages for array children using the wildcard "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" keyword. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-json","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"users.*.username.required\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Each user must have a username\"</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"arrayPointer"}]},{"type":"text","value":" is a string using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" keyword, making it easier for the error reporter to locate custom messages for field defined inside an array."}]},{"type":"element","tag":"h3","props":{"id":"metadata"},"children":[{"type":"element","tag":"a","props":{"href":"#metadata","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"metaData"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Meta data is an optional object that you can pass to the error reporter, that inturn can be used by the custom messages. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"errorReporter<span class=\"token punctuation\">.</span><span class=\"token function\">report</span><span class=\"token punctuation\">(</span>\n  pointer<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'phone'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Phone validation failed'</span><span class=\"token punctuation\">,</span>\n  arrayPointer<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> countryCode<span class=\"token operator\">:</span> <span class=\"token string\">'IN'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now, the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"countryCode"}]},{"type":"text","value":" is accessible inside the custom message as follows:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-json","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"phone\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Invalid phone number as per {{ options.countryCode }} country code\"</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"referencing-other-fields-values"},"children":[{"type":"element","tag":"a","props":{"href":"#referencing-other-fields-values","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Referencing other field's values"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"At times, you would want to write validation rules, that relies on other fields to run the validation."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the following example, the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"requiredIfExists"}]},{"type":"text","value":" validation rule first checks for the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"username"}]},{"type":"text","value":" before enforcing the required validation on the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"password"}]},{"type":"text","value":" field."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"schema<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  password<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    rules<span class=\"token punctuation\">.</span><span class=\"token function\">requiredIfExists</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now, if you are creating a rule with similar behavior, you can access the value of other fields as shown in the following example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> validator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/Validator'</span>\n\nvalidator<span class=\"token punctuation\">.</span><span class=\"token function\">rule</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-rule'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> root<span class=\"token punctuation\">,</span> tip <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  validator<span class=\"token punctuation\">.</span>helpers<span class=\"token punctuation\">.</span><span class=\"token function\">getFieldValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> tip<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"what-is-root-and-tip"},"children":[{"type":"element","tag":"a","props":{"href":"#what-is-root-and-tip","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"What is "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"root"}]},{"type":"text","value":" and "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"tip"}]},{"type":"text","value":"?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"root"}]},{"type":"text","value":" is the original data object passed to the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"validator.validate"}]},{"type":"text","value":" method. And, the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"tip"}]},{"type":"text","value":" is the closest parent object of the current field."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Given the following data object ("},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"root"}]},{"type":"text","value":")."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    profile<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      username<span class=\"token operator\">:</span> <span class=\"token string\">'virk'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The validation function is executed for the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"username"}]},{"type":"text","value":" property, the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"tip"}]},{"type":"text","value":" will the following object."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">'virk'</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We maintain a reference to the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"tip"}]},{"type":"text","value":", so that we are not performing nested lookups for multiple properties of the same object and for multiple validation rules applied on a single property."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"So, now as you know about the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"root"}]},{"type":"text","value":" and the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"tip"}]},{"type":"text","value":" properties, you need to pass these values to the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"helpers.getFieldValue"}]},{"type":"text","value":" method and it will lookup the value for you."}]}]}
