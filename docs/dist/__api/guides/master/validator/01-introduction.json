{"type":"root","children":[{"type":"element","tag":"dimertitle","props":{},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"h1","props":{"id":"introduction"},"children":[{"type":"element","tag":"a","props":{"href":"#introduction","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"AdonisJS comes with an in-built data validation library to validate form requests using a pre-defined schema. Since, the support for validations is baked-in to the framework, there is no need to install any additional libraries."}]},{"type":"element","tag":"div","props":{"className":["toc-container"]},"children":[{"type":"element","tag":"h2","props":{},"children":[{"type":"text","value":"Table of contents"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#built-with-http-in-mind"},"children":[{"type":"text","value":"Built with HTTP in mind"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#custom-error-messages"},"children":[{"type":"text","value":"Custom error messages"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#type-information"},"children":[{"type":"text","value":"Type information"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#extensible"},"children":[{"type":"text","value":"Extensible"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The AdonisJS validator has support for:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Async validations"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Validating nested objects and arrays"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Custom messages & Error reporters"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"No need to maintain separate interfaces for intellisense to work"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Removes non-validated properties from the data object"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Extensible API to add custom rules"}]}]},{"type":"element","tag":"h2","props":{"id":"built-with-http-in-mind"},"children":[{"type":"element","tag":"a","props":{"href":"#built-with-http-in-mind","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Built with HTTP in mind"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The data submitted over the HTTP is always represented as string and hence manual data casting is required to convert it to language specific data types. For example:"}]},{"type":"element","tag":"div","props":{"className":["embed","video"]},"children":[{"type":"element","tag":"video","props":{"controls":true},"children":[{"type":"element","tag":"source","props":{"src":"https://res.cloudinary.com/adonis-js/video/upload/q_80/v1589776782/adonisjs.com/http-data-is-always-string.mp4","type":"video/mp4"},"children":[]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As you can see in the above video, the value of "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"marks"}]},{"type":"text","value":" is a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"string"}]},{"type":"text","value":" and not a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"number"}]},{"type":"text","value":". Now, if a validator is strict with data types, it will offload the work of type casting on you."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"However, AdonisJS addresses this behavior and takes care of the type casting for you by inferring types from the validation schema. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"start/routes.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> schema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/Validator'</span>\n\nRoute<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> request <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> validated <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    schema<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      marks<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ðŸ‘ˆ convert to number and validate</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'typeof marks'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">typeof</span> validated<span class=\"token punctuation\">.</span>marks<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> validated\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"div","props":{"className":["embed","video"]},"children":[{"type":"element","tag":"video","props":{"controls":true},"children":[{"type":"element","tag":"source","props":{"src":"https://res.cloudinary.com/adonis-js/video/upload/q_80/v1589777292/adonisjs.com/validator-casted-data-type.mp4","type":"video/mp4"},"children":[]}]}]},{"type":"element","tag":"h2","props":{"id":"custom-error-messages"},"children":[{"type":"element","tag":"a","props":{"href":"#custom-error-messages","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Custom error messages"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The validator has first class support for defining custom error messages. The "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"validate"}]},{"type":"text","value":" method accepts an object of "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"messages"}]},{"type":"text","value":" along side the validation "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"schema"}]},{"type":"text","value":"."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"request<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  schema<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    marks<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  messages<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'marks.required'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Marks are required to submit the form'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'marks.number'</span><span class=\"token operator\">:</span> <span class=\"token string\">'Invalid value provided for the {{ field }}'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Mostly custom messages are defined as a combination of the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"field name"}]},{"type":"text","value":" + "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"validation rule"}]},{"type":"text","value":". For example: "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"marks.required"}]},{"type":"text","value":". However, you can define global messages for just the validation rules."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"You can reference runtime values within the validation messages using curly braces."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"To write messages for nested properties, you can rely on the dot notation. For example: "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"user.profile.username"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"h2","props":{"id":"type-information"},"children":[{"type":"element","tag":"a","props":{"href":"#type-information","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Type information"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The static types are extracted automatically from the runtime validation rules, hence there is no need to maintain separate interfaces just for the type information or intellisense to work."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"src":"https://res.cloudinary.com/adonis-js/image/upload/q_auto,w_700,f_auto,fl_lossy/v1589789301/adonisjs.com/validator-types.webp"},"children":[]}]},{"type":"element","tag":"h2","props":{"id":"extensible"},"children":[{"type":"element","tag":"a","props":{"href":"#extensible","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Extensible"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Just like every other part of the framework. The validator is built with extensibility in mind and exposes the API to add custom validation rules. For example: "},{"type":"element","tag":"a","props":{"href":"https://github.com/adonisjs/lucid/blob/develop/src/Bindings/Validator.ts#L168"},"children":[{"type":"text","value":"Here's the source code"}]},{"type":"text","value":" of Lucid extending the validator to add the database related validation rules."}]}]}
