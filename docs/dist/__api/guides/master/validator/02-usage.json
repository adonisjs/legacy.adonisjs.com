{"type":"root","children":[{"type":"element","tag":"dimertitle","props":{},"children":[{"type":"text","value":"Usage"}]},{"type":"element","tag":"h1","props":{"id":"usage"},"children":[{"type":"element","tag":"a","props":{"href":"#usage","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Usage"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this guide, we will take a glimpse of the AdonisJS validator by covering only the basics and later, you can deep dive into individual topics to have a stronger understanding."}]},{"type":"element","tag":"div","props":{"className":["toc-container"]},"children":[{"type":"element","tag":"h2","props":{},"children":[{"type":"text","value":"Table of contents"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#validating-http-requests"},"children":[{"type":"text","value":"Validating HTTP requests"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#handling-errors"},"children":[{"type":"text","value":"Handling Errors"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#standalone-usage"},"children":[{"type":"text","value":"Standalone usage"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#schema-101"},"children":[{"type":"text","value":"Schema 101"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#marking-fields-as-optional"},"children":[{"type":"text","value":"Marking fields as optional"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#validating-nested-objectsarrays"},"children":[{"type":"text","value":"Validating nested objects/arrays"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#validating-array-length"},"children":[{"type":"text","value":"Validating array length"}]}]}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"#whats-next"},"children":[{"type":"text","value":"What's next?"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"By the end of this guide, you will know:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How to validate form requests during an HTTP request"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How to use validator outside the flow of an HTTP request"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Covering the basics of validation schema"}]}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This guide only cover inline validation. If you'd like to create a validator class, you should refer to the "},{"type":"element","tag":"a","props":{"href":"/guides/http/form-submissions#using-validator-classes"},"children":[{"type":"text","value":"form submissions"}]},{"type":"text","value":" guide."}]}]},{"type":"element","tag":"h2","props":{"id":"validating-http-requests"},"children":[{"type":"element","tag":"a","props":{"href":"#validating-http-requests","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Validating HTTP requests"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Most of the times, you will be using the validator to validate the forms submitted over an HTTP request. So, lets begin with an HTTP specific example first and later we will see how to use the validator directly."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"span","props":{"className":["filename"]},"children":[{"type":"text","value":"app/Controllers/Http/AuthController.ts"}]},{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"dimer-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> schema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/Validator'</span></span><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> HttpContextContract <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/HttpContext'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PostsController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token function\">register</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> request <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> HttpContextContract<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">const</span> postsSchema <span class=\"token operator\">=</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      title<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      tags<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span>\n        schema<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> validatedData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      schema<span class=\"token operator\">:</span> postsSchema<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>validatedData<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>validatedData<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>validatedData<span class=\"token punctuation\">.</span>tags<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"First, you need to import the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"schema"}]},{"type":"text","value":" object from "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"@ioc:Adonis/Core/Validator"}]},{"type":"text","value":" module."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Next, you have to define the validation schema using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"schema.create"}]},{"type":"text","value":" method and define all the properties you want to validate."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Finally, using the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"request.validate"}]},{"type":"text","value":" method, you can validate the request form data against the pre-define schema."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If validation passes, then the return value of the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"request.validate"}]},{"type":"text","value":" will contain all the validated properties, otherwise an exception will be raised."}]},{"type":"element","tag":"h3","props":{"id":"handling-errors"},"children":[{"type":"element","tag":"a","props":{"href":"#handling-errors","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Handling Errors"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Upon failure, the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"request.validate"}]},{"type":"text","value":" method will raise an exception, containing the error messages. One option is self handle the exception and convert it into a response. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    schema<span class=\"token operator\">:</span> postsSchema<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">)</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">422</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Another "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"(recommended)"}]},{"type":"text","value":" approach is to let AdonisJS handle the exception for you and convert it into a response. So let's understand how that will work."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The core of the framework allows exceptions to self handle themselves during an HTTP request. You can learn more about it in "},{"type":"element","tag":"a","props":{"href":"/guides/http/exception-handling#self-handled-exceptions"},"children":[{"type":"text","value":"exception handling guide"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Once, the validator will "},{"type":"element","tag":"a","props":{"href":"https://github.com/adonisjs/validator/blob/develop/src/ValidationException/index.ts#L21"},"children":[{"type":"text","value":"handle"}]},{"type":"text","value":" its own exception, it will convert the error messages to an HTTP response as explained below:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"If "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Accept: application/json"}]},{"type":"text","value":" request header exists. It will return back a JSON response."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"If "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"Accept: application/vnd.api+json"}]},{"type":"text","value":" request header exists. It will return back a JSON response formatted as per the "},{"type":"element","tag":"a","props":{"href":"https://jsonapi.org/format/#errors"},"children":[{"type":"text","value":"JSON API spec"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Otherwise, the request will be redirected back to the previous page and error messages are forwarded back as "},{"type":"element","tag":"a","props":{"href":"/guides/http/form-submissions#displaying-validation-errors"},"children":[{"type":"text","value":"flash messages"}]},{"type":"text","value":"."}]}]}]}]},{"type":"element","tag":"h2","props":{"id":"standalone-usage"},"children":[{"type":"element","tag":"a","props":{"href":"#standalone-usage","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Standalone usage"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also use the validator outside of the HTTP requests. Following is an example of the same."}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"With standalone usage, you will have to wrap your validation calls inside a "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"try/catch"}]},{"type":"text","value":" statement, since the self handled exceptions only work during within HTTP request lifecycle."}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  schema<span class=\"token punctuation\">,</span>\n  validator<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 👈 import validator</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ioc:Adonis/Core/Validator'</span>\n\n<span class=\"token comment\">// Define schema</span>\n<span class=\"token keyword\">const</span> postsSchema <span class=\"token operator\">=</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Define the data to validate</span>\n<span class=\"dimer-highlight-code-line\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">  title<span class=\"token operator\">:</span> <span class=\"token string\">'Adonis 101'</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">  content<span class=\"token operator\">:</span> <span class=\"token string\">'Lets get started'</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">  tags<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token comment\">// Run validations</span>\n<span class=\"dimer-highlight-code-line\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token keyword\">await</span> validator<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">    schema<span class=\"token operator\">:</span> postsSchema<span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">    data<span class=\"token operator\">:</span> data<span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"dimer-highlight-code-line\"><span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">)</span></span><span class=\"dimer-highlight-code-line\"><span class=\"token punctuation\">}</span></span>"}]}]}]},{"type":"element","tag":"h2","props":{"id":"schema-101"},"children":[{"type":"element","tag":"a","props":{"href":"#schema-101","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Schema 101"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The schema definition is divided into three main parts."}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The shape of the expected data defined using "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"(schema.create())"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The expected data type of individual properties, ie "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"(schema.string())"}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Additional set of validation rules to validate the data formatting, or checking if its unique in the database."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"img","props":{"src":"https://res.cloudinary.com/adonis-js/image/upload/q_auto,w_700,f_auto,fl_lossy/v1591851435/adonisjs.com/schema-101_ldhxks.png"},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Also, if you look carefully, we have separated the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"format validations from core data types"}]},{"type":"text","value":". For example: There is no data type called "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"schema.email"}]},{"type":"text","value":". In fact "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"email"}]},{"type":"text","value":" is a standalone rule to check the formatting a string."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This separation helps a lot in extending the validator with custom rules, without creating unnecessary schema types that has no meaning. For example: There is no thing called "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"email type"}]},{"type":"text","value":", it is a just a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"string"}]},{"type":"text","value":", formatted as an email."}]},{"type":"element","tag":"h3","props":{"id":"marking-fields-as-optional"},"children":[{"type":"element","tag":"a","props":{"href":"#marking-fields-as-optional","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Marking fields as optional"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Every schema field is marked as "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"required"}]},{"type":"text","value":" by default. However, you can mark them optional by chaining the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":".optional"}]},{"type":"text","value":" method. For example:"}]},{"type":"element","tag":"div","props":{"className":["alert","alert-note"]},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can chain the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":".optional"}]},{"type":"text","value":" method with all available schema data types."}]}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"schema<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  content<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"So, here we are saying, the "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"content"}]},{"type":"text","value":" property must be defined as a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"string"}]},{"type":"text","value":", but its okay if it is not defined at all."}]},{"type":"element","tag":"h3","props":{"id":"validating-nested-objectsarrays"},"children":[{"type":"element","tag":"a","props":{"href":"#validating-nested-objectsarrays","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Validating nested objects/arrays"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can define schema for a nested object using the "},{"type":"element","tag":"a","props":{"href":"/guides/validator/schema-types#schemaobject"},"children":[{"type":"text","value":"schema.object"}]},{"type":"text","value":" data type. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"schema<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"dimer-highlight-code-line\">  profile<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"dimer-highlight-code-line\">    name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"dimer-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Similarly, you can validate an array using the "},{"type":"element","tag":"a","props":{"href":"/guides/validator/schema-types#schemaarray"},"children":[{"type":"text","value":"schema.array"}]},{"type":"text","value":" data type."}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"schema<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  accounts<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span>\n    schema<span class=\"token punctuation\">.</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      id<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Valid data</span>\n<span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"twitter\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@adonisframework\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"github\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"adonisjs\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"validating-array-length"},"children":[{"type":"element","tag":"a","props":{"href":"#validating-array-length","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"Validating array length"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can make use of the additional validation rules to enforce a minimum or a maximum array length. For example:"}]},{"type":"element","tag":"div","props":{"className":["dimer-highlight"]},"children":[{"type":"element","tag":"pre","props":{"className":["language-ts","line-numbers"]},"children":[{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"schema<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  accounts<span class=\"token operator\">:</span> schema<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    rules<span class=\"token punctuation\">.</span><span class=\"token function\">minLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    rules<span class=\"token punctuation\">.</span><span class=\"token function\">maxLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">members</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n"}]}]}]},{"type":"element","tag":"h2","props":{"id":"whats-next"},"children":[{"type":"element","tag":"a","props":{"href":"#whats-next","aria-hidden":true},"children":[{"type":"element","tag":"span","props":{"className":["icon","icon-link"]},"children":[]}]},{"type":"text","value":"What's next?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"We hope, the usage guide gave a head start with the validator. However, we do recommend reading the following guides to explore all available data types and validation rules."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Available "},{"type":"element","tag":"a","props":{"href":"schema-types"},"children":[{"type":"text","value":"schema data types"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"List of available "},{"type":"element","tag":"a","props":{"href":"rules"},"children":[{"type":"text","value":"validation rules"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"a","props":{"href":"custom-messages"},"children":[{"type":"text","value":"Custom messages"}]}]}]}]}
